From: <Saved by Blink>
Snapshot-Content-Location: https://docs.python.org/3/reference/expressions.html#operator-precedence
Subject: =?utf-8?Q?6.=20Expressions=20=E2=80=94=20Python=203.8.1=20documentation?=
Date: Mon, 27 Jan 2020 22:44:44 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--pqKor7BVEUh96UTtccQ369JDE6tshTqMPrnc3Soavt----"


------MultipartBoundary--pqKor7BVEUh96UTtccQ369JDE6tshTqMPrnc3Soavt----
Content-Type: text/html
Content-ID: <frame-FAB92BDA03C03B6C5016D1CF1471DA77@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/reference/expressions.html#operator-precedence

<!DOCTYPE html><html xmlns=3D"http://www.w3.org/1999/xhtml"><head><meta htt=
p-equiv=3D"Content-Type" content=3D"text/html; charset=3DUTF-8"><link rel=
=3D"stylesheet" type=3D"text/css" href=3D"cid:css-df77f20e-c09b-425c-a602-7=
f2609ac8dd9@mhtml.blink" />
   =20
    <title>6. Expressions =E2=80=94 Python 3.8.1 documentation</title>
    <link rel=3D"stylesheet" href=3D"https://docs.python.org/3/_static/pydo=
ctheme.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"https://docs.python.org/3/_static/pygm=
ents.css" type=3D"text/css">
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
   =20
    <link rel=3D"search" type=3D"application/opensearchdescription+xml" tit=
le=3D"Search within Python 3.8.1 documentation" href=3D"https://docs.python=
.org/3/_static/opensearch.xml">
    <link rel=3D"author" title=3D"About these documents" href=3D"https://do=
cs.python.org/3/about.html">
    <link rel=3D"index" title=3D"Index" href=3D"https://docs.python.org/3/g=
enindex.html">
    <link rel=3D"search" title=3D"Search" href=3D"https://docs.python.org/3=
/search.html">
    <link rel=3D"copyright" title=3D"Copyright" href=3D"https://docs.python=
.org/3/copyright.html">
    <link rel=3D"next" title=3D"7. Simple statements" href=3D"https://docs.=
python.org/3/reference/simple_stmts.html">
    <link rel=3D"prev" title=3D"5. The import system" href=3D"https://docs.=
python.org/3/reference/import.html">
    <link rel=3D"canonical" href=3D"https://docs.python.org/3/reference/exp=
ressions.html">
   =20
     =20
     =20
     =20
   =20

   =20
   =20

    <link rel=3D"shortcut icon" type=3D"image/png" href=3D"https://docs.pyt=
hon.org/3/_static/py.png">
   =20
   =20
   =20
    =20


  </head><body>
 =20
    <div class=3D"related" role=3D"navigation" aria-label=3D"related naviga=
tion">
      <h3>Navigation</h3>
      <ul>
        <li class=3D"right" style=3D"margin-right: 10px">
          <a href=3D"https://docs.python.org/3/genindex.html" title=3D"Gene=
ral Index" accesskey=3D"I">index</a></li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/py-modindex.html" title=3D"P=
ython Module Index">modules</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/reference/simple_stmts.html"=
 title=3D"7. Simple statements" accesskey=3D"N">next</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/reference/import.html" title=
=3D"5. The import system" accesskey=3D"P">previous</a> |</li>

    <li><img src=3D"https://docs.python.org/3/_static/py.png" alt=3D"" styl=
e=3D"vertical-align: middle; margin-top: -1px"></li>
    <li><a href=3D"https://www.python.org/">Python</a> =C2=BB</li>
   =20

    <li>
      <span class=3D"language_switcher_placeholder"><select><option value=
=3D"en" selected=3D"selected">English</option><option value=3D"fr">French</=
option><option value=3D"ja">Japanese</option><option value=3D"ko">Korean</o=
ption><option value=3D"pt-br">Brazilian Portuguese</option><option value=3D=
"zh-cn">Simplified Chinese</option></select></span>
      <span class=3D"version_switcher_placeholder"><select><option value=3D=
"3.9">dev (3.9)</option><option value=3D"3.8" selected=3D"selected">3.8.1</=
option><option value=3D"3.7">3.7</option><option value=3D"3.6">3.6</option>=
<option value=3D"3.5">3.5</option><option value=3D"2.7">2.7</option></selec=
t></span>
      <a href=3D"https://docs.python.org/3/index.html">Documentation </a> =
=C2=BB
    </li>

          <li class=3D"nav-item nav-item-1"><a href=3D"https://docs.python.=
org/3/reference/index.html" accesskey=3D"U">The Python Language Reference</=
a> =C2=BB</li>
    <li class=3D"right">
       =20

    <div class=3D"inline-search" style=3D"" role=3D"search">
        <form class=3D"inline-search" action=3D"https://docs.python.org/3/s=
earch.html" method=3D"get">
          <input placeholder=3D"Quick search" type=3D"text" name=3D"q">
          <input type=3D"submit" value=3D"Go">
         =20
         =20
        </form>
    </div>
   =20
         |
    </li>

      </ul>
    </div>   =20

    <div class=3D"document">
      <div class=3D"documentwrapper">
        <div class=3D"bodywrapper">
          <div class=3D"body" role=3D"main">
           =20
  <div class=3D"section" id=3D"expressions">
<span id=3D"id1"></span><h1><span class=3D"section-number">6. </span>Expres=
sions<a class=3D"headerlink" href=3D"https://docs.python.org/3/reference/ex=
pressions.html#expressions" title=3D"Permalink to this headline">=C2=B6</a>=
</h1>
<p id=3D"index-0">This chapter explains the meaning of the elements of expr=
essions in Python.</p>
<p><strong>Syntax Notes:</strong> In this and the following chapters, exten=
ded BNF notation will
be used to describe syntax, not lexical analysis.  When (one alternative of=
) a
syntax rule has the form</p>
<pre><strong id=3D"grammar-token-name">name</strong> ::=3D  <code class=3D"=
xref docutils literal notranslate"><span class=3D"pre">othername</span></co=
de>
</pre>
<p>and no semantics are given, the semantics of this form of <code class=3D=
"docutils literal notranslate"><span class=3D"pre">name</span></code> are t=
he same
as for <code class=3D"docutils literal notranslate"><span class=3D"pre">oth=
ername</span></code>.</p>
<div class=3D"section" id=3D"arithmetic-conversions">
<span id=3D"conversions"></span><h2><span class=3D"section-number">6.1. </s=
pan>Arithmetic conversions<a class=3D"headerlink" href=3D"https://docs.pyth=
on.org/3/reference/expressions.html#arithmetic-conversions" title=3D"Permal=
ink to this headline">=C2=B6</a></h2>
<p id=3D"index-1">When a description of an arithmetic operator below uses t=
he phrase =E2=80=9Cthe numeric
arguments are converted to a common type,=E2=80=9D this means that the oper=
ator
implementation for built-in types works as follows:</p>
<ul class=3D"simple">
<li><p>If either argument is a complex number, the other is converted to co=
mplex;</p></li>
<li><p>otherwise, if either argument is a floating point number, the other =
is
converted to floating point;</p></li>
<li><p>otherwise, both must be integers and no conversion is necessary.</p>=
</li>
</ul>
<p>Some additional rules apply for certain operators (e.g., a string as a l=
eft
argument to the =E2=80=98%=E2=80=99 operator).  Extensions must define thei=
r own conversion
behavior.</p>
</div>
<div class=3D"section" id=3D"atoms">
<span id=3D"id2"></span><h2><span class=3D"section-number">6.2. </span>Atom=
s<a class=3D"headerlink" href=3D"https://docs.python.org/3/reference/expres=
sions.html#atoms" title=3D"Permalink to this headline">=C2=B6</a></h2>
<p id=3D"index-2">Atoms are the most basic elements of expressions.  The si=
mplest atoms are
identifiers or literals.  Forms enclosed in parentheses, brackets or braces=
 are
also categorized syntactically as atoms.  The syntax for atoms is:</p>
<pre><strong id=3D"grammar-token-atom">atom     </strong> ::=3D  <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/reference/lexical=
_analysis.html#grammar-token-identifier"><code class=3D"xref docutils liter=
al notranslate"><span class=3D"pre">identifier</span></code></a> | <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/reference/express=
ions.html#grammar-token-literal"><code class=3D"xref docutils literal notra=
nslate"><span class=3D"pre">literal</span></code></a> | <a class=3D"referen=
ce internal" href=3D"https://docs.python.org/3/reference/expressions.html#g=
rammar-token-enclosure"><code class=3D"xref docutils literal notranslate"><=
span class=3D"pre">enclosure</span></code></a>
<strong id=3D"grammar-token-enclosure">enclosure</strong> ::=3D  <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/reference/express=
ions.html#grammar-token-parenth-form"><code class=3D"xref docutils literal =
notranslate"><span class=3D"pre">parenth_form</span></code></a> | <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/reference/express=
ions.html#grammar-token-list-display"><code class=3D"xref docutils literal =
notranslate"><span class=3D"pre">list_display</span></code></a> | <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/reference/express=
ions.html#grammar-token-dict-display"><code class=3D"xref docutils literal =
notranslate"><span class=3D"pre">dict_display</span></code></a> | <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/reference/express=
ions.html#grammar-token-set-display"><code class=3D"xref docutils literal n=
otranslate"><span class=3D"pre">set_display</span></code></a>
               | <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3/reference/expressions.html#grammar-token-generator-expression"><cod=
e class=3D"xref docutils literal notranslate"><span class=3D"pre">generator=
_expression</span></code></a> | <a class=3D"reference internal" href=3D"htt=
ps://docs.python.org/3/reference/expressions.html#grammar-token-yield-atom"=
><code class=3D"xref docutils literal notranslate"><span class=3D"pre">yiel=
d_atom</span></code></a>
</pre>
<div class=3D"section" id=3D"atom-identifiers">
<span id=3D"identifiers-names"></span><h3><span class=3D"section-number">6.=
2.1. </span>Identifiers (Names)<a class=3D"headerlink" href=3D"https://docs=
.python.org/3/reference/expressions.html#atom-identifiers" title=3D"Permali=
nk to this headline">=C2=B6</a></h3>
<p id=3D"index-3">An identifier occurring as an atom is a name.  See sectio=
n <a class=3D"reference internal" href=3D"https://docs.python.org/3/referen=
ce/lexical_analysis.html#identifiers"><span class=3D"std std-ref">Identifie=
rs and keywords</span></a>
for lexical definition and section <a class=3D"reference internal" href=3D"=
https://docs.python.org/3/reference/executionmodel.html#naming"><span class=
=3D"std std-ref">Naming and binding</span></a> for documentation of naming =
and
binding.</p>
<p id=3D"index-4">When the name is bound to an object, evaluation of the at=
om yields that object.
When a name is not bound, an attempt to evaluate it raises a <a class=3D"re=
ference internal" href=3D"https://docs.python.org/3/library/exceptions.html=
#NameError" title=3D"NameError"><code class=3D"xref py py-exc docutils lite=
ral notranslate"><span class=3D"pre">NameError</span></code></a>
exception.</p>
<p id=3D"index-5"><strong>Private name mangling:</strong> When an identifie=
r that textually occurs in a class
definition begins with two or more underscore characters and does not end i=
n two
or more underscores, it is considered a <em class=3D"dfn">private name</em>=
 of that class.
Private names are transformed to a longer form before code is generated for
them.  The transformation inserts the class name, with leading underscores
removed and a single underscore inserted, in front of the name.  For exampl=
e,
the identifier <code class=3D"docutils literal notranslate"><span class=3D"=
pre">__spam</span></code> occurring in a class named <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">Ham</span></code> will be transf=
ormed
to <code class=3D"docutils literal notranslate"><span class=3D"pre">_Ham__s=
pam</span></code>.  This transformation is independent of the syntactical
context in which the identifier is used.  If the transformed name is extrem=
ely
long (longer than 255 characters), implementation defined truncation may ha=
ppen.
If the class name consists only of underscores, no transformation is done.<=
/p>
</div>
<div class=3D"section" id=3D"literals">
<span id=3D"atom-literals"></span><h3><span class=3D"section-number">6.2.2.=
 </span>Literals<a class=3D"headerlink" href=3D"https://docs.python.org/3/r=
eference/expressions.html#literals" title=3D"Permalink to this headline">=
=C2=B6</a></h3>
<p id=3D"index-6">Python supports string and bytes literals and various num=
eric literals:</p>
<pre><strong id=3D"grammar-token-literal">literal</strong> ::=3D  <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/reference/lexical=
_analysis.html#grammar-token-stringliteral"><code class=3D"xref docutils li=
teral notranslate"><span class=3D"pre">stringliteral</span></code></a> | <a=
 class=3D"reference internal" href=3D"https://docs.python.org/3/reference/l=
exical_analysis.html#grammar-token-bytesliteral"><code class=3D"xref docuti=
ls literal notranslate"><span class=3D"pre">bytesliteral</span></code></a>
             | <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/reference/lexical_analysis.html#grammar-token-integer"><code class=3D=
"xref docutils literal notranslate"><span class=3D"pre">integer</span></cod=
e></a> | <a class=3D"reference internal" href=3D"https://docs.python.org/3/=
reference/lexical_analysis.html#grammar-token-floatnumber"><code class=3D"x=
ref docutils literal notranslate"><span class=3D"pre">floatnumber</span></c=
ode></a> | <a class=3D"reference internal" href=3D"https://docs.python.org/=
3/reference/lexical_analysis.html#grammar-token-imagnumber"><code class=3D"=
xref docutils literal notranslate"><span class=3D"pre">imagnumber</span></c=
ode></a>
</pre>
<p>Evaluation of a literal yields an object of the given type (string, byte=
s,
integer, floating point number, complex number) with the given value.  The =
value
may be approximated in the case of floating point and imaginary (complex)
literals.  See section <a class=3D"reference internal" href=3D"https://docs=
.python.org/3/reference/lexical_analysis.html#literals"><span class=3D"std =
std-ref">Literals</span></a> for details.</p>
<p id=3D"index-7">All literals correspond to immutable data types, and henc=
e the object=E2=80=99s identity
is less important than its value.  Multiple evaluations of literals with th=
e
same value (either the same occurrence in the program text or a different
occurrence) may obtain the same object or a different object with the same
value.</p>
</div>
<div class=3D"section" id=3D"parenthesized-forms">
<span id=3D"parenthesized"></span><h3><span class=3D"section-number">6.2.3.=
 </span>Parenthesized forms<a class=3D"headerlink" href=3D"https://docs.pyt=
hon.org/3/reference/expressions.html#parenthesized-forms" title=3D"Permalin=
k to this headline">=C2=B6</a></h3>
<p id=3D"index-8">A parenthesized form is an optional expression list enclo=
sed in parentheses:</p>
<pre><strong id=3D"grammar-token-parenth-form">parenth_form</strong> ::=3D =
 "(" [<a class=3D"reference internal" href=3D"https://docs.python.org/3/ref=
erence/expressions.html#grammar-token-starred-expression"><code class=3D"xr=
ef docutils literal notranslate"><span class=3D"pre">starred_expression</sp=
an></code></a>] ")"
</pre>
<p>A parenthesized expression list yields whatever that expression list yie=
lds: if
the list contains at least one comma, it yields a tuple; otherwise, it yiel=
ds
the single expression that makes up the expression list.</p>
<p id=3D"index-9">An empty pair of parentheses yields an empty tuple object=
.  Since tuples are
immutable, the same rules as for literals apply (i.e., two occurrences of t=
he empty
tuple may or may not yield the same object).</p>
<p id=3D"index-10">Note that tuples are not formed by the parentheses, but =
rather by use of the
comma operator.  The exception is the empty tuple, for which parentheses <e=
m>are</em>
required =E2=80=94 allowing unparenthesized =E2=80=9Cnothing=E2=80=9D in ex=
pressions would cause
ambiguities and allow common typos to pass uncaught.</p>
</div>
<div class=3D"section" id=3D"displays-for-lists-sets-and-dictionaries">
<span id=3D"comprehensions"></span><h3><span class=3D"section-number">6.2.4=
. </span>Displays for lists, sets and dictionaries<a class=3D"headerlink" h=
ref=3D"https://docs.python.org/3/reference/expressions.html#displays-for-li=
sts-sets-and-dictionaries" title=3D"Permalink to this headline">=C2=B6</a><=
/h3>
<p>For constructing a list, a set or a dictionary Python provides special s=
yntax
called =E2=80=9Cdisplays=E2=80=9D, each of them in two flavors:</p>
<ul class=3D"simple">
<li><p>either the container contents are listed explicitly, or</p></li>
<li><p>they are computed via a set of looping and filtering instructions, c=
alled a
<em class=3D"dfn">comprehension</em>.</p></li>
</ul>
<p id=3D"index-11">Common syntax elements for comprehensions are:</p>
<pre><strong id=3D"grammar-token-comprehension">comprehension</strong> ::=
=3D  <a class=3D"reference internal" href=3D"https://docs.python.org/3/refe=
rence/expressions.html#grammar-token-expression"><code class=3D"xref docuti=
ls literal notranslate"><span class=3D"pre">expression</span></code></a> <a=
 class=3D"reference internal" href=3D"https://docs.python.org/3/reference/e=
xpressions.html#grammar-token-comp-for"><code class=3D"xref docutils litera=
l notranslate"><span class=3D"pre">comp_for</span></code></a>
<strong id=3D"grammar-token-comp-for">comp_for     </strong> ::=3D  ["async=
"] "for" <a class=3D"reference internal" href=3D"https://docs.python.org/3/=
reference/simple_stmts.html#grammar-token-target-list"><code class=3D"xref =
docutils literal notranslate"><span class=3D"pre">target_list</span></code>=
</a> "in" <a class=3D"reference internal" href=3D"https://docs.python.org/3=
/reference/expressions.html#grammar-token-or-test"><code class=3D"xref docu=
tils literal notranslate"><span class=3D"pre">or_test</span></code></a> [<a=
 class=3D"reference internal" href=3D"https://docs.python.org/3/reference/e=
xpressions.html#grammar-token-comp-iter"><code class=3D"xref docutils liter=
al notranslate"><span class=3D"pre">comp_iter</span></code></a>]
<strong id=3D"grammar-token-comp-iter">comp_iter    </strong> ::=3D  <a cla=
ss=3D"reference internal" href=3D"https://docs.python.org/3/reference/expre=
ssions.html#grammar-token-comp-for"><code class=3D"xref docutils literal no=
translate"><span class=3D"pre">comp_for</span></code></a> | <a class=3D"ref=
erence internal" href=3D"https://docs.python.org/3/reference/expressions.ht=
ml#grammar-token-comp-if"><code class=3D"xref docutils literal notranslate"=
><span class=3D"pre">comp_if</span></code></a>
<strong id=3D"grammar-token-comp-if">comp_if      </strong> ::=3D  "if" <a =
class=3D"reference internal" href=3D"https://docs.python.org/3/reference/ex=
pressions.html#grammar-token-expression-nocond"><code class=3D"xref docutil=
s literal notranslate"><span class=3D"pre">expression_nocond</span></code><=
/a> [<a class=3D"reference internal" href=3D"https://docs.python.org/3/refe=
rence/expressions.html#grammar-token-comp-iter"><code class=3D"xref docutil=
s literal notranslate"><span class=3D"pre">comp_iter</span></code></a>]
</pre>
<p>The comprehension consists of a single expression followed by at least o=
ne
<code class=3D"xref std std-keyword docutils literal notranslate"><span cla=
ss=3D"pre">for</span></code> clause and zero or more <code class=3D"xref st=
d std-keyword docutils literal notranslate"><span class=3D"pre">for</span><=
/code> or <code class=3D"xref std std-keyword docutils literal notranslate"=
><span class=3D"pre">if</span></code> clauses.
In this case, the elements of the new container are those that would be pro=
duced
by considering each of the <code class=3D"xref std std-keyword docutils lit=
eral notranslate"><span class=3D"pre">for</span></code> or <code class=3D"x=
ref std std-keyword docutils literal notranslate"><span class=3D"pre">if</s=
pan></code> clauses a block,
nesting from left to right, and evaluating the expression to produce an ele=
ment
each time the innermost block is reached.</p>
<p>However, aside from the iterable expression in the leftmost <code class=
=3D"xref std std-keyword docutils literal notranslate"><span class=3D"pre">=
for</span></code> clause,
the comprehension is executed in a separate implicitly nested scope. This e=
nsures
that names assigned to in the target list don=E2=80=99t =E2=80=9Cleak=E2=80=
=9D into the enclosing scope.</p>
<p>The iterable expression in the leftmost <code class=3D"xref std std-keyw=
ord docutils literal notranslate"><span class=3D"pre">for</span></code> cla=
use is evaluated
directly in the enclosing scope and then passed as an argument to the impli=
citly
nested scope. Subsequent <code class=3D"xref std std-keyword docutils liter=
al notranslate"><span class=3D"pre">for</span></code> clauses and any filte=
r condition in the
leftmost <code class=3D"xref std std-keyword docutils literal notranslate">=
<span class=3D"pre">for</span></code> clause cannot be evaluated in the enc=
losing scope as
they may depend on the values obtained from the leftmost iterable. For exam=
ple:
<code class=3D"docutils literal notranslate"><span class=3D"pre">[x*y</span=
> <span class=3D"pre">for</span> <span class=3D"pre">x</span> <span class=
=3D"pre">in</span> <span class=3D"pre">range(10)</span> <span class=3D"pre"=
>for</span> <span class=3D"pre">y</span> <span class=3D"pre">in</span> <spa=
n class=3D"pre">range(x,</span> <span class=3D"pre">x+10)]</span></code>.</=
p>
<p>To ensure the comprehension always results in a container of the appropr=
iate
type, <code class=3D"docutils literal notranslate"><span class=3D"pre">yiel=
d</span></code> and <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">yield</span> <span class=3D"pre">from</span></code> expressions a=
re prohibited in the implicitly
nested scope.</p>
<p id=3D"index-12">Since Python 3.6, in an <a class=3D"reference internal" =
href=3D"https://docs.python.org/3/reference/compound_stmts.html#async-def">=
<code class=3D"xref std std-keyword docutils literal notranslate"><span cla=
ss=3D"pre">async</span> <span class=3D"pre">def</span></code></a> function,=
 an <code class=3D"xref std std-keyword docutils literal notranslate"><span=
 class=3D"pre">async</span> <span class=3D"pre">for</span></code>
clause may be used to iterate over a <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/glossary.html#term-asynchronous-iterator"><sp=
an class=3D"xref std std-term">asynchronous iterator</span></a>.
A comprehension in an <code class=3D"xref std std-keyword docutils literal =
notranslate"><span class=3D"pre">async</span> <span class=3D"pre">def</span=
></code> function may consist of either a
<code class=3D"xref std std-keyword docutils literal notranslate"><span cla=
ss=3D"pre">for</span></code> or <code class=3D"xref std std-keyword docutil=
s literal notranslate"><span class=3D"pre">async</span> <span class=3D"pre"=
>for</span></code> clause following the leading
expression, may contain additional <code class=3D"xref std std-keyword docu=
tils literal notranslate"><span class=3D"pre">for</span></code> or <code cl=
ass=3D"xref std std-keyword docutils literal notranslate"><span class=3D"pr=
e">async</span> <span class=3D"pre">for</span></code>
clauses, and may also use <a class=3D"reference internal" href=3D"https://d=
ocs.python.org/3/reference/expressions.html#await"><code class=3D"xref std =
std-keyword docutils literal notranslate"><span class=3D"pre">await</span><=
/code></a> expressions.
If a comprehension contains either <code class=3D"xref std std-keyword docu=
tils literal notranslate"><span class=3D"pre">async</span> <span class=3D"p=
re">for</span></code> clauses
or <code class=3D"xref std std-keyword docutils literal notranslate"><span =
class=3D"pre">await</span></code> expressions it is called an
<em class=3D"dfn">asynchronous comprehension</em>.  An asynchronous compreh=
ension may
suspend the execution of the coroutine function in which it appears.
See also <span class=3D"target" id=3D"index-13"></span><a class=3D"pep refe=
rence external" href=3D"https://www.python.org/dev/peps/pep-0530"><strong>P=
EP 530</strong></a>.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">New in version 3.6: </span>Asynchr=
onous comprehensions were introduced.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.8: </span><=
code class=3D"docutils literal notranslate"><span class=3D"pre">yield</span=
></code> and <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">yield</span> <span class=3D"pre">from</span></code> prohibited in the im=
plicitly nested scope.</p>
</div>
</div>
<div class=3D"section" id=3D"list-displays">
<span id=3D"lists"></span><h3><span class=3D"section-number">6.2.5. </span>=
List displays<a class=3D"headerlink" href=3D"https://docs.python.org/3/refe=
rence/expressions.html#list-displays" title=3D"Permalink to this headline">=
=C2=B6</a></h3>
<p id=3D"index-14">A list display is a possibly empty series of expressions=
 enclosed in square
brackets:</p>
<pre><strong id=3D"grammar-token-list-display">list_display</strong> ::=3D =
 "[" [<a class=3D"reference internal" href=3D"https://docs.python.org/3/ref=
erence/expressions.html#grammar-token-starred-list"><code class=3D"xref doc=
utils literal notranslate"><span class=3D"pre">starred_list</span></code></=
a> | <a class=3D"reference internal" href=3D"https://docs.python.org/3/refe=
rence/expressions.html#grammar-token-comprehension"><code class=3D"xref doc=
utils literal notranslate"><span class=3D"pre">comprehension</span></code><=
/a>] "]"
</pre>
<p>A list display yields a new list object, the contents being specified by=
 either
a list of expressions or a comprehension.  When a comma-separated list of
expressions is supplied, its elements are evaluated from left to right and
placed into the list object in that order.  When a comprehension is supplie=
d,
the list is constructed from the elements resulting from the comprehension.=
</p>
</div>
<div class=3D"section" id=3D"set-displays">
<span id=3D"set"></span><h3><span class=3D"section-number">6.2.6. </span>Se=
t displays<a class=3D"headerlink" href=3D"https://docs.python.org/3/referen=
ce/expressions.html#set-displays" title=3D"Permalink to this headline">=C2=
=B6</a></h3>
<p id=3D"index-15">A set display is denoted by curly braces and distinguish=
able from dictionary
displays by the lack of colons separating keys and values:</p>
<pre><strong id=3D"grammar-token-set-display">set_display</strong> ::=3D  "=
{" (<a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#grammar-token-starred-list"><code class=3D"xref docut=
ils literal notranslate"><span class=3D"pre">starred_list</span></code></a>=
 | <a class=3D"reference internal" href=3D"https://docs.python.org/3/refere=
nce/expressions.html#grammar-token-comprehension"><code class=3D"xref docut=
ils literal notranslate"><span class=3D"pre">comprehension</span></code></a=
>) "}"
</pre>
<p>A set display yields a new mutable set object, the contents being specif=
ied by
either a sequence of expressions or a comprehension.  When a comma-separate=
d
list of expressions is supplied, its elements are evaluated from left to ri=
ght
and added to the set object.  When a comprehension is supplied, the set is
constructed from the elements resulting from the comprehension.</p>
<p>An empty set cannot be constructed with <code class=3D"docutils literal =
notranslate"><span class=3D"pre">{}</span></code>; this literal constructs =
an empty
dictionary.</p>
</div>
<div class=3D"section" id=3D"dictionary-displays">
<span id=3D"dict"></span><h3><span class=3D"section-number">6.2.7. </span>D=
ictionary displays<a class=3D"headerlink" href=3D"https://docs.python.org/3=
/reference/expressions.html#dictionary-displays" title=3D"Permalink to this=
 headline">=C2=B6</a></h3>
<p id=3D"index-16">A dictionary display is a possibly empty series of key/d=
atum pairs enclosed in
curly braces:</p>
<pre><strong id=3D"grammar-token-dict-display">dict_display      </strong> =
::=3D  "{" [<a class=3D"reference internal" href=3D"https://docs.python.org=
/3/reference/expressions.html#grammar-token-key-datum-list"><code class=3D"=
xref docutils literal notranslate"><span class=3D"pre">key_datum_list</span=
></code></a> | <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/reference/expressions.html#grammar-token-dict-comprehension"><code cl=
ass=3D"xref docutils literal notranslate"><span class=3D"pre">dict_comprehe=
nsion</span></code></a>] "}"
<strong id=3D"grammar-token-key-datum-list">key_datum_list    </strong> ::=
=3D  <a class=3D"reference internal" href=3D"https://docs.python.org/3/refe=
rence/expressions.html#grammar-token-key-datum"><code class=3D"xref docutil=
s literal notranslate"><span class=3D"pre">key_datum</span></code></a> (","=
 <a class=3D"reference internal" href=3D"https://docs.python.org/3/referenc=
e/expressions.html#grammar-token-key-datum"><code class=3D"xref docutils li=
teral notranslate"><span class=3D"pre">key_datum</span></code></a>)* [","]
<strong id=3D"grammar-token-key-datum">key_datum         </strong> ::=3D  <=
a class=3D"reference internal" href=3D"https://docs.python.org/3/reference/=
expressions.html#grammar-token-expression"><code class=3D"xref docutils lit=
eral notranslate"><span class=3D"pre">expression</span></code></a> ":" <a c=
lass=3D"reference internal" href=3D"https://docs.python.org/3/reference/exp=
ressions.html#grammar-token-expression"><code class=3D"xref docutils litera=
l notranslate"><span class=3D"pre">expression</span></code></a> | "**" <a c=
lass=3D"reference internal" href=3D"https://docs.python.org/3/reference/exp=
ressions.html#grammar-token-or-expr"><code class=3D"xref docutils literal n=
otranslate"><span class=3D"pre">or_expr</span></code></a>
<strong id=3D"grammar-token-dict-comprehension">dict_comprehension</strong>=
 ::=3D  <a class=3D"reference internal" href=3D"https://docs.python.org/3/r=
eference/expressions.html#grammar-token-expression"><code class=3D"xref doc=
utils literal notranslate"><span class=3D"pre">expression</span></code></a>=
 ":" <a class=3D"reference internal" href=3D"https://docs.python.org/3/refe=
rence/expressions.html#grammar-token-expression"><code class=3D"xref docuti=
ls literal notranslate"><span class=3D"pre">expression</span></code></a> <a=
 class=3D"reference internal" href=3D"https://docs.python.org/3/reference/e=
xpressions.html#grammar-token-comp-for"><code class=3D"xref docutils litera=
l notranslate"><span class=3D"pre">comp_for</span></code></a>
</pre>
<p>A dictionary display yields a new dictionary object.</p>
<p>If a comma-separated sequence of key/datum pairs is given, they are eval=
uated
from left to right to define the entries of the dictionary: each key object=
 is
used as a key into the dictionary to store the corresponding datum.  This m=
eans
that you can specify the same key multiple times in the key/datum list, and=
 the
final dictionary=E2=80=99s value for that key will be the last one given.</=
p>
<p id=3D"index-17">A double asterisk <code class=3D"docutils literal notran=
slate"><span class=3D"pre">**</span></code> denotes <em class=3D"dfn">dicti=
onary unpacking</em>.
Its operand must be a <a class=3D"reference internal" href=3D"https://docs.=
python.org/3/glossary.html#term-mapping"><span class=3D"xref std std-term">=
mapping</span></a>.  Each mapping item is added
to the new dictionary.  Later values replace values already set by
earlier key/datum pairs and earlier dictionary unpackings.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">New in version 3.5: </span>Unpacki=
ng into dictionary displays, originally proposed by <span class=3D"target" =
id=3D"index-18"></span><a class=3D"pep reference external" href=3D"https://=
www.python.org/dev/peps/pep-0448"><strong>PEP 448</strong></a>.</p>
</div>
<p>A dict comprehension, in contrast to list and set comprehensions, needs =
two
expressions separated with a colon followed by the usual =E2=80=9Cfor=E2=80=
=9D and =E2=80=9Cif=E2=80=9D clauses.
When the comprehension is run, the resulting key and value elements are ins=
erted
in the new dictionary in the order they are produced.</p>
<p id=3D"index-19">Restrictions on the types of the key values are listed e=
arlier in section
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/datamodel.html#types"><span class=3D"std std-ref">The standard type hierar=
chy</span></a>.  (To summarize, the key type should be <a class=3D"referenc=
e internal" href=3D"https://docs.python.org/3/glossary.html#term-hashable">=
<span class=3D"xref std std-term">hashable</span></a>, which excludes
all mutable objects.)  Clashes between duplicate keys are not detected; the=
 last
datum (textually rightmost in the display) stored for a given key value
prevails.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.8: </span>P=
rior to Python 3.8, in dict comprehensions, the evaluation order of key
and value was not well-defined.  In CPython, the value was evaluated before
the key.  Starting with 3.8, the key is evaluated before the value, as
proposed by <span class=3D"target" id=3D"index-20"></span><a class=3D"pep r=
eference external" href=3D"https://www.python.org/dev/peps/pep-0572"><stron=
g>PEP 572</strong></a>.</p>
</div>
</div>
<div class=3D"section" id=3D"generator-expressions">
<span id=3D"genexpr"></span><h3><span class=3D"section-number">6.2.8. </spa=
n>Generator expressions<a class=3D"headerlink" href=3D"https://docs.python.=
org/3/reference/expressions.html#generator-expressions" title=3D"Permalink =
to this headline">=C2=B6</a></h3>
<p id=3D"index-21">A generator expression is a compact generator notation i=
n parentheses:</p>
<pre><strong id=3D"grammar-token-generator-expression">generator_expression=
</strong> ::=3D  "(" <a class=3D"reference internal" href=3D"https://docs.p=
ython.org/3/reference/expressions.html#grammar-token-expression"><code clas=
s=3D"xref docutils literal notranslate"><span class=3D"pre">expression</spa=
n></code></a> <a class=3D"reference internal" href=3D"https://docs.python.o=
rg/3/reference/expressions.html#grammar-token-comp-for"><code class=3D"xref=
 docutils literal notranslate"><span class=3D"pre">comp_for</span></code></=
a> ")"
</pre>
<p>A generator expression yields a new generator object.  Its syntax is the=
 same as
for comprehensions, except that it is enclosed in parentheses instead of
brackets or curly braces.</p>
<p>Variables used in the generator expression are evaluated lazily when the
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#generator.__next__" title=3D"generator.__next__"><code cl=
ass=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre">__=
next__()</span></code></a> method is called for the generator object (in th=
e same
fashion as normal generators).  However, the iterable expression in the
leftmost <code class=3D"xref std std-keyword docutils literal notranslate">=
<span class=3D"pre">for</span></code> clause is immediately evaluated, so t=
hat an error
produced by it will be emitted at the point where the generator expression
is defined, rather than at the point where the first value is retrieved.
Subsequent <code class=3D"xref std std-keyword docutils literal notranslate=
"><span class=3D"pre">for</span></code> clauses and any filter condition in=
 the leftmost
<code class=3D"xref std std-keyword docutils literal notranslate"><span cla=
ss=3D"pre">for</span></code> clause cannot be evaluated in the enclosing sc=
ope as they may
depend on the values obtained from the leftmost iterable. For example:
<code class=3D"docutils literal notranslate"><span class=3D"pre">(x*y</span=
> <span class=3D"pre">for</span> <span class=3D"pre">x</span> <span class=
=3D"pre">in</span> <span class=3D"pre">range(10)</span> <span class=3D"pre"=
>for</span> <span class=3D"pre">y</span> <span class=3D"pre">in</span> <spa=
n class=3D"pre">range(x,</span> <span class=3D"pre">x+10))</span></code>.</=
p>
<p>The parentheses can be omitted on calls with only one argument.  See sec=
tion
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#calls"><span class=3D"std std-ref">Calls</span></a> for d=
etails.</p>
<p>To avoid interfering with the expected operation of the generator expres=
sion
itself, <code class=3D"docutils literal notranslate"><span class=3D"pre">yi=
eld</span></code> and <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">yield</span> <span class=3D"pre">from</span></code> expressions=
 are prohibited in the
implicitly defined generator.</p>
<p>If a generator expression contains either <code class=3D"xref std std-ke=
yword docutils literal notranslate"><span class=3D"pre">async</span> <span =
class=3D"pre">for</span></code>
clauses or <a class=3D"reference internal" href=3D"https://docs.python.org/=
3/reference/expressions.html#await"><code class=3D"xref std std-keyword doc=
utils literal notranslate"><span class=3D"pre">await</span></code></a> expr=
essions it is called an
<em class=3D"dfn">asynchronous generator expression</em>.  An asynchronous =
generator
expression returns a new asynchronous generator object,
which is an asynchronous iterator (see <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/reference/datamodel.html#async-iterators"><sp=
an class=3D"std std-ref">Asynchronous Iterators</span></a>).</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">New in version 3.6: </span>Asynchr=
onous generator expressions were introduced.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.7: </span>P=
rior to Python 3.7, asynchronous generator expressions could
only appear in <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/reference/compound_stmts.html#async-def"><code class=3D"xref std std-=
keyword docutils literal notranslate"><span class=3D"pre">async</span> <spa=
n class=3D"pre">def</span></code></a> coroutines.  Starting
with 3.7, any function can use asynchronous generator expressions.</p>
</div>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.8: </span><=
code class=3D"docutils literal notranslate"><span class=3D"pre">yield</span=
></code> and <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">yield</span> <span class=3D"pre">from</span></code> prohibited in the im=
plicitly nested scope.</p>
</div>
</div>
<div class=3D"section" id=3D"yield-expressions">
<span id=3D"yieldexpr"></span><h3><span class=3D"section-number">6.2.9. </s=
pan>Yield expressions<a class=3D"headerlink" href=3D"https://docs.python.or=
g/3/reference/expressions.html#yield-expressions" title=3D"Permalink to thi=
s headline">=C2=B6</a></h3>
<pre id=3D"index-22"><strong id=3D"grammar-token-yield-atom">yield_atom    =
  </strong> ::=3D  "(" <a class=3D"reference internal" href=3D"https://docs=
.python.org/3/reference/expressions.html#grammar-token-yield-expression"><c=
ode class=3D"xref docutils literal notranslate"><span class=3D"pre">yield_e=
xpression</span></code></a> ")"
<strong id=3D"grammar-token-yield-expression">yield_expression</strong> ::=
=3D  "yield" [<a class=3D"reference internal" href=3D"https://docs.python.o=
rg/3/reference/expressions.html#grammar-token-expression-list"><code class=
=3D"xref docutils literal notranslate"><span class=3D"pre">expression_list<=
/span></code></a> | "from" <a class=3D"reference internal" href=3D"https://=
docs.python.org/3/reference/expressions.html#grammar-token-expression"><cod=
e class=3D"xref docutils literal notranslate"><span class=3D"pre">expressio=
n</span></code></a>]
</pre>
<p>The yield expression is used when defining a <a class=3D"reference inter=
nal" href=3D"https://docs.python.org/3/glossary.html#term-generator"><span =
class=3D"xref std std-term">generator</span></a> function
or an <a class=3D"reference internal" href=3D"https://docs.python.org/3/glo=
ssary.html#term-asynchronous-generator"><span class=3D"xref std std-term">a=
synchronous generator</span></a> function and
thus can only be used in the body of a function definition.  Using a yield
expression in a function=E2=80=99s body causes that function to be a genera=
tor,
and using it in an <a class=3D"reference internal" href=3D"https://docs.pyt=
hon.org/3/reference/compound_stmts.html#async-def"><code class=3D"xref std =
std-keyword docutils literal notranslate"><span class=3D"pre">async</span> =
<span class=3D"pre">def</span></code></a> function=E2=80=99s body causes th=
at
coroutine function to be an asynchronous generator. For example:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">gen</span><span class=3D"p">():</span>  <span class=3D"c1">=
# defines a generator function</span>
    <span class=3D"k">yield</span> <span class=3D"mi">123</span>

<span class=3D"k">async</span> <span class=3D"k">def</span> <span class=3D"=
nf">agen</span><span class=3D"p">():</span> <span class=3D"c1"># defines an=
 asynchronous generator function</span>
    <span class=3D"k">yield</span> <span class=3D"mi">123</span>
</pre></div>
</div>
<p>Due to their side effects on the containing scope, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">yield</span></code> expressions
are not permitted as part of the implicitly defined scopes used to
implement comprehensions and generator expressions.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.8: </span>Y=
ield expressions prohibited in the implicitly nested scopes used to
implement comprehensions and generator expressions.</p>
</div>
<p>Generator functions are described below, while asynchronous generator
functions are described separately in section
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#asynchronous-generator-functions"><span class=3D"std std-=
ref">Asynchronous generator functions</span></a>.</p>
<p>When a generator function is called, it returns an iterator known as a
generator.  That generator then controls the execution of the generator fun=
ction.
The execution starts when one of the generator=E2=80=99s methods is called.=
  At that
time, the execution proceeds to the first yield expression, where it is
suspended again, returning the value of <a class=3D"reference internal" hre=
f=3D"https://docs.python.org/3/reference/expressions.html#grammar-token-exp=
ression-list"><code class=3D"xref std std-token docutils literal notranslat=
e"><span class=3D"pre">expression_list</span></code></a> to the generator=
=E2=80=99s
caller.  By suspended, we mean that all local state is retained, including =
the
current bindings of local variables, the instruction pointer, the internal
evaluation stack, and the state of any exception handling.  When the execut=
ion
is resumed by calling one of the
generator=E2=80=99s methods, the function can proceed exactly as if the yie=
ld expression
were just another external call.  The value of the yield expression after
resuming depends on the method which resumed the execution.  If
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#generator.__next__" title=3D"generator.__next__"><code cl=
ass=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre">__=
next__()</span></code></a> is used (typically via either a <a class=3D"refe=
rence internal" href=3D"https://docs.python.org/3/reference/compound_stmts.=
html#for"><code class=3D"xref std std-keyword docutils literal notranslate"=
><span class=3D"pre">for</span></code></a> or
the <a class=3D"reference internal" href=3D"https://docs.python.org/3/libra=
ry/functions.html#next" title=3D"next"><code class=3D"xref py py-func docut=
ils literal notranslate"><span class=3D"pre">next()</span></code></a> built=
in) then the result is <a class=3D"reference internal" href=3D"https://docs=
.python.org/3/library/constants.html#None" title=3D"None"><code class=3D"xr=
ef py py-const docutils literal notranslate"><span class=3D"pre">None</span=
></code></a>.  Otherwise, if
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#generator.send" title=3D"generator.send"><code class=3D"x=
ref py py-meth docutils literal notranslate"><span class=3D"pre">send()</sp=
an></code></a> is used, then the result will be the value passed in to
that method.</p>
<p id=3D"index-23">All of this makes generator functions quite similar to c=
oroutines; they yield
multiple times, they have more than one entry point and their execution can=
 be
suspended.  The only difference is that a generator function cannot control
where the execution should continue after it yields; the control is always
transferred to the generator=E2=80=99s caller.</p>
<p>Yield expressions are allowed anywhere in a <a class=3D"reference intern=
al" href=3D"https://docs.python.org/3/reference/compound_stmts.html#try"><c=
ode class=3D"xref std std-keyword docutils literal notranslate"><span class=
=3D"pre">try</span></code></a> construct.  If the
generator is not resumed before it is
finalized (by reaching a zero reference count or by being garbage collected=
),
the generator-iterator=E2=80=99s <a class=3D"reference internal" href=3D"ht=
tps://docs.python.org/3/reference/expressions.html#generator.close" title=
=3D"generator.close"><code class=3D"xref py py-meth docutils literal notran=
slate"><span class=3D"pre">close()</span></code></a> method will be called,
allowing any pending <a class=3D"reference internal" href=3D"https://docs.p=
ython.org/3/reference/compound_stmts.html#finally"><code class=3D"xref std =
std-keyword docutils literal notranslate"><span class=3D"pre">finally</span=
></code></a> clauses to execute.</p>
<p id=3D"index-24">When <code class=3D"docutils literal notranslate"><span =
class=3D"pre">yield</span> <span class=3D"pre">from</span> <span class=3D"p=
re">&lt;expr&gt;</span></code> is used, it treats the supplied expression a=
s
a subiterator. All values produced by that subiterator are passed directly
to the caller of the current generator=E2=80=99s methods. Any values passed=
 in with
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#generator.send" title=3D"generator.send"><code class=3D"x=
ref py py-meth docutils literal notranslate"><span class=3D"pre">send()</sp=
an></code></a> and any exceptions passed in with
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#generator.throw" title=3D"generator.throw"><code class=3D=
"xref py py-meth docutils literal notranslate"><span class=3D"pre">throw()<=
/span></code></a> are passed to the underlying iterator if it has the
appropriate methods.  If this is not the case, then <a class=3D"reference i=
nternal" href=3D"https://docs.python.org/3/reference/expressions.html#gener=
ator.send" title=3D"generator.send"><code class=3D"xref py py-meth docutils=
 literal notranslate"><span class=3D"pre">send()</span></code></a>
will raise <a class=3D"reference internal" href=3D"https://docs.python.org/=
3/library/exceptions.html#AttributeError" title=3D"AttributeError"><code cl=
ass=3D"xref py py-exc docutils literal notranslate"><span class=3D"pre">Att=
ributeError</span></code></a> or <a class=3D"reference internal" href=3D"ht=
tps://docs.python.org/3/library/exceptions.html#TypeError" title=3D"TypeErr=
or"><code class=3D"xref py py-exc docutils literal notranslate"><span class=
=3D"pre">TypeError</span></code></a>, while
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#generator.throw" title=3D"generator.throw"><code class=3D=
"xref py py-meth docutils literal notranslate"><span class=3D"pre">throw()<=
/span></code></a> will just raise the passed in exception immediately.</p>
<p>When the underlying iterator is complete, the <code class=3D"xref py py-=
attr docutils literal notranslate"><span class=3D"pre">value</span></code>
attribute of the raised <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/library/exceptions.html#StopIteration" title=3D"StopIteratio=
n"><code class=3D"xref py py-exc docutils literal notranslate"><span class=
=3D"pre">StopIteration</span></code></a> instance becomes the value of
the yield expression. It can be either set explicitly when raising
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
xceptions.html#StopIteration" title=3D"StopIteration"><code class=3D"xref p=
y py-exc docutils literal notranslate"><span class=3D"pre">StopIteration</s=
pan></code></a>, or automatically when the subiterator is a generator
(by returning a value from the subgenerator).</p>
<blockquote>
<div><div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.3: </span>A=
dded <code class=3D"docutils literal notranslate"><span class=3D"pre">yield=
</span> <span class=3D"pre">from</span> <span class=3D"pre">&lt;expr&gt;</s=
pan></code> to delegate control flow to a subiterator.</p>
</div>
</div></blockquote>
<p>The parentheses may be omitted when the yield expression is the sole exp=
ression
on the right hand side of an assignment statement.</p>
<div class=3D"admonition seealso">
<p class=3D"admonition-title">See also</p>
<dl class=3D"simple">
<dt><span class=3D"target" id=3D"index-25"></span><a class=3D"pep reference=
 external" href=3D"https://www.python.org/dev/peps/pep-0255"><strong>PEP 25=
5</strong></a> - Simple Generators</dt><dd><p>The proposal for adding gener=
ators and the <a class=3D"reference internal" href=3D"https://docs.python.o=
rg/3/reference/simple_stmts.html#yield"><code class=3D"xref std std-keyword=
 docutils literal notranslate"><span class=3D"pre">yield</span></code></a> =
statement to Python.</p>
</dd>
<dt><span class=3D"target" id=3D"index-26"></span><a class=3D"pep reference=
 external" href=3D"https://www.python.org/dev/peps/pep-0342"><strong>PEP 34=
2</strong></a> - Coroutines via Enhanced Generators</dt><dd><p>The proposal=
 to enhance the API and syntax of generators, making them
usable as simple coroutines.</p>
</dd>
<dt><span class=3D"target" id=3D"index-27"></span><a class=3D"pep reference=
 external" href=3D"https://www.python.org/dev/peps/pep-0380"><strong>PEP 38=
0</strong></a> - Syntax for Delegating to a Subgenerator</dt><dd><p>The pro=
posal to introduce the <code class=3D"xref std std-token docutils literal n=
otranslate"><span class=3D"pre">yield_from</span></code> syntax, making del=
egation
to subgenerators easy.</p>
</dd>
<dt><span class=3D"target" id=3D"index-28"></span><a class=3D"pep reference=
 external" href=3D"https://www.python.org/dev/peps/pep-0525"><strong>PEP 52=
5</strong></a> - Asynchronous Generators</dt><dd><p>The proposal that expan=
ded on <span class=3D"target" id=3D"index-29"></span><a class=3D"pep refere=
nce external" href=3D"https://www.python.org/dev/peps/pep-0492"><strong>PEP=
 492</strong></a> by adding generator capabilities to
coroutine functions.</p>
</dd>
</dl>
</div>
<div class=3D"section" id=3D"generator-iterator-methods">
<span id=3D"generator-methods"></span><span id=3D"index-30"></span><h4><spa=
n class=3D"section-number">6.2.9.1. </span>Generator-iterator methods<a cla=
ss=3D"headerlink" href=3D"https://docs.python.org/3/reference/expressions.h=
tml#generator-iterator-methods" title=3D"Permalink to this headline">=C2=B6=
</a></h4>
<p>This subsection describes the methods of a generator iterator.  They can
be used to control the execution of a generator function.</p>
<p>Note that calling any of the generator methods below when the generator
is already executing raises a <a class=3D"reference internal" href=3D"https=
://docs.python.org/3/library/exceptions.html#ValueError" title=3D"ValueErro=
r"><code class=3D"xref py py-exc docutils literal notranslate"><span class=
=3D"pre">ValueError</span></code></a> exception.</p>
<span class=3D"target" id=3D"index-31"></span><dl class=3D"method">
<dt id=3D"generator.__next__">
<code class=3D"sig-prename descclassname">generator.</code><code class=3D"s=
ig-name descname">__next__</code><span class=3D"sig-paren">(</span><span cl=
ass=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.pyth=
on.org/3/reference/expressions.html#generator.__next__" title=3D"Permalink =
to this definition">=C2=B6</a></dt>
<dd><p>Starts the execution of a generator function or resumes it at the la=
st
executed yield expression.  When a generator function is resumed with a
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#generator.__next__" title=3D"generator.__next__"><code cl=
ass=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre">__=
next__()</span></code></a> method, the current yield expression always
evaluates to <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3/library/constants.html#None" title=3D"None"><code class=3D"xref py py-c=
onst docutils literal notranslate"><span class=3D"pre">None</span></code></=
a>.  The execution then continues to the next yield
expression, where the generator is suspended again, and the value of the
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#grammar-token-expression-list"><code class=3D"xref std st=
d-token docutils literal notranslate"><span class=3D"pre">expression_list</=
span></code></a> is returned to <a class=3D"reference internal" href=3D"htt=
ps://docs.python.org/3/reference/expressions.html#generator.__next__" title=
=3D"generator.__next__"><code class=3D"xref py py-meth docutils literal not=
ranslate"><span class=3D"pre">__next__()</span></code></a>=E2=80=99s caller=
.  If the
generator exits without yielding another value, a <a class=3D"reference int=
ernal" href=3D"https://docs.python.org/3/library/exceptions.html#StopIterat=
ion" title=3D"StopIteration"><code class=3D"xref py py-exc docutils literal=
 notranslate"><span class=3D"pre">StopIteration</span></code></a>
exception is raised.</p>
<p>This method is normally called implicitly, e.g. by a <a class=3D"referen=
ce internal" href=3D"https://docs.python.org/3/reference/compound_stmts.htm=
l#for"><code class=3D"xref std std-keyword docutils literal notranslate"><s=
pan class=3D"pre">for</span></code></a> loop, or
by the built-in <a class=3D"reference internal" href=3D"https://docs.python=
.org/3/library/functions.html#next" title=3D"next"><code class=3D"xref py p=
y-func docutils literal notranslate"><span class=3D"pre">next()</span></cod=
e></a> function.</p>
</dd></dl>

<dl class=3D"method">
<dt id=3D"generator.send">
<code class=3D"sig-prename descclassname">generator.</code><code class=3D"s=
ig-name descname">send</code><span class=3D"sig-paren">(</span><em class=3D=
"sig-param">value</em><span class=3D"sig-paren">)</span><a class=3D"headerl=
ink" href=3D"https://docs.python.org/3/reference/expressions.html#generator=
.send" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Resumes the execution and =E2=80=9Csends=E2=80=9D a value into the g=
enerator function.  The
<em>value</em> argument becomes the result of the current yield expression.=
  The
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#generator.send" title=3D"generator.send"><code class=3D"x=
ref py py-meth docutils literal notranslate"><span class=3D"pre">send()</sp=
an></code></a> method returns the next value yielded by the generator, or
raises <a class=3D"reference internal" href=3D"https://docs.python.org/3/li=
brary/exceptions.html#StopIteration" title=3D"StopIteration"><code class=3D=
"xref py py-exc docutils literal notranslate"><span class=3D"pre">StopItera=
tion</span></code></a> if the generator exits without yielding another
value.  When <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3/reference/expressions.html#generator.send" title=3D"generator.send"><co=
de class=3D"xref py py-meth docutils literal notranslate"><span class=3D"pr=
e">send()</span></code></a> is called to start the generator, it must be ca=
lled
with <a class=3D"reference internal" href=3D"https://docs.python.org/3/libr=
ary/constants.html#None" title=3D"None"><code class=3D"xref py py-const doc=
utils literal notranslate"><span class=3D"pre">None</span></code></a> as th=
e argument, because there is no yield expression that
could receive the value.</p>
</dd></dl>

<dl class=3D"method">
<dt id=3D"generator.throw">
<code class=3D"sig-prename descclassname">generator.</code><code class=3D"s=
ig-name descname">throw</code><span class=3D"sig-paren">(</span><em class=
=3D"sig-param">type</em><span class=3D"optional">[</span>, <em class=3D"sig=
-param">value</em><span class=3D"optional">[</span>, <em class=3D"sig-param=
">traceback</em><span class=3D"optional">]</span><span class=3D"optional">]=
</span><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"ht=
tps://docs.python.org/3/reference/expressions.html#generator.throw" title=
=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Raises an exception of type <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">type</span></code> at the point where the generato=
r was paused,
and returns the next value yielded by the generator function.  If the gener=
ator
exits without yielding another value, a <a class=3D"reference internal" hre=
f=3D"https://docs.python.org/3/library/exceptions.html#StopIteration" title=
=3D"StopIteration"><code class=3D"xref py py-exc docutils literal notransla=
te"><span class=3D"pre">StopIteration</span></code></a> exception is
raised.  If the generator function does not catch the passed-in exception, =
or
raises a different exception, then that exception propagates to the caller.=
</p>
</dd></dl>

<span class=3D"target" id=3D"index-32"></span><dl class=3D"method">
<dt id=3D"generator.close">
<code class=3D"sig-prename descclassname">generator.</code><code class=3D"s=
ig-name descname">close</code><span class=3D"sig-paren">(</span><span class=
=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.=
org/3/reference/expressions.html#generator.close" title=3D"Permalink to thi=
s definition">=C2=B6</a></dt>
<dd><p>Raises a <a class=3D"reference internal" href=3D"https://docs.python=
.org/3/library/exceptions.html#GeneratorExit" title=3D"GeneratorExit"><code=
 class=3D"xref py py-exc docutils literal notranslate"><span class=3D"pre">=
GeneratorExit</span></code></a> at the point where the generator function w=
as
paused.  If the generator function then exits gracefully, is already closed=
,
or raises <a class=3D"reference internal" href=3D"https://docs.python.org/3=
/library/exceptions.html#GeneratorExit" title=3D"GeneratorExit"><code class=
=3D"xref py py-exc docutils literal notranslate"><span class=3D"pre">Genera=
torExit</span></code></a> (by not catching the exception), close
returns to its caller.  If the generator yields a value, a
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
xceptions.html#RuntimeError" title=3D"RuntimeError"><code class=3D"xref py =
py-exc docutils literal notranslate"><span class=3D"pre">RuntimeError</span=
></code></a> is raised.  If the generator raises any other exception,
it is propagated to the caller.  <a class=3D"reference internal" href=3D"ht=
tps://docs.python.org/3/reference/expressions.html#generator.close" title=
=3D"generator.close"><code class=3D"xref py py-meth docutils literal notran=
slate"><span class=3D"pre">close()</span></code></a> does nothing if the ge=
nerator
has already exited due to an exception or normal exit.</p>
</dd></dl>

</div>
<div class=3D"section" id=3D"examples">
<span id=3D"index-33"></span><h4><span class=3D"section-number">6.2.9.2. </=
span>Examples<a class=3D"headerlink" href=3D"https://docs.python.org/3/refe=
rence/expressions.html#examples" title=3D"Permalink to this headline">=C2=
=B6</a></h4>
<p>Here is a simple example that demonstrates the behavior of generators an=
d
generator functions:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" style=3D"cursor: pointer; position: absolute; top: 0px; righ=
t: 0px; border-color: rgb(170, 204, 153); border-style: solid; border-width=
: 0.990566px; color: rgb(170, 204, 153); font-family: monospace; padding-le=
ft: 0.2em; padding-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&=
gt;</span><pre><span></span><span class=3D"gp">&gt;&gt;&gt; </span><span cl=
ass=3D"k">def</span> <span class=3D"nf">echo</span><span class=3D"p">(</spa=
n><span class=3D"n">value</span><span class=3D"o">=3D</span><span class=3D"=
kc">None</span><span class=3D"p">):</span>
<span class=3D"gp">... </span>    <span class=3D"nb">print</span><span clas=
s=3D"p">(</span><span class=3D"s2">"Execution starts when 'next()' is calle=
d for the first time."</span><span class=3D"p">)</span>
<span class=3D"gp">... </span>    <span class=3D"k">try</span><span class=
=3D"p">:</span>
<span class=3D"gp">... </span>        <span class=3D"k">while</span> <span =
class=3D"kc">True</span><span class=3D"p">:</span>
<span class=3D"gp">... </span>            <span class=3D"k">try</span><span=
 class=3D"p">:</span>
<span class=3D"gp">... </span>                <span class=3D"n">value</span=
> <span class=3D"o">=3D</span> <span class=3D"p">(</span><span class=3D"k">=
yield</span> <span class=3D"n">value</span><span class=3D"p">)</span>
<span class=3D"gp">... </span>            <span class=3D"k">except</span> <=
span class=3D"ne">Exception</span> <span class=3D"k">as</span> <span class=
=3D"n">e</span><span class=3D"p">:</span>
<span class=3D"gp">... </span>                <span class=3D"n">value</span=
> <span class=3D"o">=3D</span> <span class=3D"n">e</span>
<span class=3D"gp">... </span>    <span class=3D"k">finally</span><span cla=
ss=3D"p">:</span>
<span class=3D"gp">... </span>        <span class=3D"nb">print</span><span =
class=3D"p">(</span><span class=3D"s2">"Don't forget to clean up when 'clos=
e()' is called."</span><span class=3D"p">)</span>
<span class=3D"gp">...</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">generator</span> <=
span class=3D"o">=3D</span> <span class=3D"n">echo</span><span class=3D"p">=
(</span><span class=3D"mi">1</span><span class=3D"p">)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">print</span><span=
 class=3D"p">(</span><span class=3D"nb">next</span><span class=3D"p">(</spa=
n><span class=3D"n">generator</span><span class=3D"p">))</span>
<span class=3D"go">Execution starts when 'next()' is called for the first t=
ime.</span>
<span class=3D"go">1</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">print</span><span=
 class=3D"p">(</span><span class=3D"nb">next</span><span class=3D"p">(</spa=
n><span class=3D"n">generator</span><span class=3D"p">))</span>
<span class=3D"go">None</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"nb">print</span><span=
 class=3D"p">(</span><span class=3D"n">generator</span><span class=3D"o">.<=
/span><span class=3D"n">send</span><span class=3D"p">(</span><span class=3D=
"mi">2</span><span class=3D"p">))</span>
<span class=3D"go">2</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">generator</span><s=
pan class=3D"o">.</span><span class=3D"n">throw</span><span class=3D"p">(</=
span><span class=3D"ne">TypeError</span><span class=3D"p">,</span> <span cl=
ass=3D"s2">"spam"</span><span class=3D"p">)</span>
<span class=3D"go">TypeError('spam',)</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">generator</span><s=
pan class=3D"o">.</span><span class=3D"n">close</span><span class=3D"p">()<=
/span>
<span class=3D"go">Don't forget to clean up when 'close()' is called.</span=
>
</pre></div>
</div>
<p>For examples using <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">yield</span> <span class=3D"pre">from</span></code>, see <a cla=
ss=3D"reference internal" href=3D"https://docs.python.org/3/whatsnew/3.3.ht=
ml#pep-380"><span class=3D"std std-ref">PEP 380: Syntax for Delegating to a=
 Subgenerator</span></a> in =E2=80=9CWhat=E2=80=99s New in
Python.=E2=80=9D</p>
</div>
<div class=3D"section" id=3D"asynchronous-generator-functions">
<span id=3D"id3"></span><h4><span class=3D"section-number">6.2.9.3. </span>=
Asynchronous generator functions<a class=3D"headerlink" href=3D"https://doc=
s.python.org/3/reference/expressions.html#asynchronous-generator-functions"=
 title=3D"Permalink to this headline">=C2=B6</a></h4>
<p>The presence of a yield expression in a function or method defined using
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/compound_stmts.html#async-def"><code class=3D"xref std std-keyword docutil=
s literal notranslate"><span class=3D"pre">async</span> <span class=3D"pre"=
>def</span></code></a> further defines the function as an
<a class=3D"reference internal" href=3D"https://docs.python.org/3/glossary.=
html#term-asynchronous-generator"><span class=3D"xref std std-term">asynchr=
onous generator</span></a> function.</p>
<p>When an asynchronous generator function is called, it returns an
asynchronous iterator known as an asynchronous generator object.
That object then controls the execution of the generator function.
An asynchronous generator object is typically used in an
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/compound_stmts.html#async-for"><code class=3D"xref std std-keyword docutil=
s literal notranslate"><span class=3D"pre">async</span> <span class=3D"pre"=
>for</span></code></a> statement in a coroutine function analogously to
how a generator object would be used in a <a class=3D"reference internal" h=
ref=3D"https://docs.python.org/3/reference/compound_stmts.html#for"><code c=
lass=3D"xref std std-keyword docutils literal notranslate"><span class=3D"p=
re">for</span></code></a> statement.</p>
<p>Calling one of the asynchronous generator=E2=80=99s methods returns an
<a class=3D"reference internal" href=3D"https://docs.python.org/3/glossary.=
html#term-awaitable"><span class=3D"xref std std-term">awaitable</span></a>=
 object, and the execution starts when this object
is awaited on. At that time, the execution proceeds to the first yield
expression, where it is suspended again, returning the value of
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#grammar-token-expression-list"><code class=3D"xref std st=
d-token docutils literal notranslate"><span class=3D"pre">expression_list</=
span></code></a> to the awaiting coroutine. As with a generator,
suspension means that all local state is retained, including the
current bindings of local variables, the instruction pointer, the internal
evaluation stack, and the state of any exception handling.  When the execut=
ion
is resumed by awaiting on the next object returned by the asynchronous
generator=E2=80=99s methods, the function can proceed exactly as if the yie=
ld
expression were just another external call. The value of the yield expressi=
on
after resuming depends on the method which resumed the execution.  If
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#agen.__anext__" title=3D"agen.__anext__"><code class=3D"x=
ref py py-meth docutils literal notranslate"><span class=3D"pre">__anext__(=
)</span></code></a> is used then the result is <a class=3D"reference intern=
al" href=3D"https://docs.python.org/3/library/constants.html#None" title=3D=
"None"><code class=3D"xref py py-const docutils literal notranslate"><span =
class=3D"pre">None</span></code></a>. Otherwise, if
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#agen.asend" title=3D"agen.asend"><code class=3D"xref py p=
y-meth docutils literal notranslate"><span class=3D"pre">asend()</span></co=
de></a> is used, then the result will be the value passed in to
that method.</p>
<p>In an asynchronous generator function, yield expressions are allowed any=
where
in a <a class=3D"reference internal" href=3D"https://docs.python.org/3/refe=
rence/compound_stmts.html#try"><code class=3D"xref std std-keyword docutils=
 literal notranslate"><span class=3D"pre">try</span></code></a> construct. =
However, if an asynchronous generator is not
resumed before it is finalized (by reaching a zero reference count or by
being garbage collected), then a yield expression within a <code class=3D"x=
ref std std-keyword docutils literal notranslate"><span class=3D"pre">try</=
span></code>
construct could result in a failure to execute pending <a class=3D"referenc=
e internal" href=3D"https://docs.python.org/3/reference/compound_stmts.html=
#finally"><code class=3D"xref std std-keyword docutils literal notranslate"=
><span class=3D"pre">finally</span></code></a>
clauses.  In this case, it is the responsibility of the event loop or
scheduler running the asynchronous generator to call the asynchronous
generator-iterator=E2=80=99s <a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/reference/expressions.html#agen.aclose" title=3D"agen.a=
close"><code class=3D"xref py py-meth docutils literal notranslate"><span c=
lass=3D"pre">aclose()</span></code></a> method and run the resulting
coroutine object, thus allowing any pending <code class=3D"xref std std-key=
word docutils literal notranslate"><span class=3D"pre">finally</span></code=
> clauses
to execute.</p>
<p>To take care of finalization, an event loop should define
a <em>finalizer</em> function which takes an asynchronous generator-iterato=
r
and presumably calls <a class=3D"reference internal" href=3D"https://docs.p=
ython.org/3/reference/expressions.html#agen.aclose" title=3D"agen.aclose"><=
code class=3D"xref py py-meth docutils literal notranslate"><span class=3D"=
pre">aclose()</span></code></a> and executes the coroutine.
This  <em>finalizer</em> may be registered by calling <a class=3D"reference=
 internal" href=3D"https://docs.python.org/3/library/sys.html#sys.set_async=
gen_hooks" title=3D"sys.set_asyncgen_hooks"><code class=3D"xref py py-func =
docutils literal notranslate"><span class=3D"pre">sys.set_asyncgen_hooks()<=
/span></code></a>.
When first iterated over, an asynchronous generator-iterator will store the
registered <em>finalizer</em> to be called upon finalization. For a referen=
ce example
of a <em>finalizer</em> method see the implementation of
<code class=3D"docutils literal notranslate"><span class=3D"pre">asyncio.Lo=
op.shutdown_asyncgens</span></code> in <a class=3D"reference external" href=
=3D"https://github.com/python/cpython/tree/3.8/Lib/asyncio/base_events.py">=
Lib/asyncio/base_events.py</a>.</p>
<p>The expression <code class=3D"docutils literal notranslate"><span class=
=3D"pre">yield</span> <span class=3D"pre">from</span> <span class=3D"pre">&=
lt;expr&gt;</span></code> is a syntax error when used in an
asynchronous generator function.</p>
</div>
<div class=3D"section" id=3D"asynchronous-generator-iterator-methods">
<span id=3D"asynchronous-generator-methods"></span><span id=3D"index-34"></=
span><h4><span class=3D"section-number">6.2.9.4. </span>Asynchronous genera=
tor-iterator methods<a class=3D"headerlink" href=3D"https://docs.python.org=
/3/reference/expressions.html#asynchronous-generator-iterator-methods" titl=
e=3D"Permalink to this headline">=C2=B6</a></h4>
<p>This subsection describes the methods of an asynchronous generator itera=
tor,
which are used to control the execution of a generator function.</p>
<span class=3D"target" id=3D"index-35"></span><dl class=3D"method">
<dt id=3D"agen.__anext__">
<em class=3D"property">coroutine </em><code class=3D"sig-prename descclassn=
ame">agen.</code><code class=3D"sig-name descname">__anext__</code><span cl=
ass=3D"sig-paren">(</span><span class=3D"sig-paren">)</span><a class=3D"hea=
derlink" href=3D"https://docs.python.org/3/reference/expressions.html#agen.=
__anext__" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Returns an awaitable which when run starts to execute the asynchrono=
us
generator or resumes it at the last executed yield expression.  When an
asynchronous generator function is resumed with an <a class=3D"reference in=
ternal" href=3D"https://docs.python.org/3/reference/expressions.html#agen._=
_anext__" title=3D"agen.__anext__"><code class=3D"xref py py-meth docutils =
literal notranslate"><span class=3D"pre">__anext__()</span></code></a>
method, the current yield expression always evaluates to <a class=3D"refere=
nce internal" href=3D"https://docs.python.org/3/library/constants.html#None=
" title=3D"None"><code class=3D"xref py py-const docutils literal notransla=
te"><span class=3D"pre">None</span></code></a> in
the returned awaitable, which when run will continue to the next yield
expression. The value of the <a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/reference/expressions.html#grammar-token-expression-lis=
t"><code class=3D"xref std std-token docutils literal notranslate"><span cl=
ass=3D"pre">expression_list</span></code></a> of the yield
expression is the value of the <a class=3D"reference internal" href=3D"http=
s://docs.python.org/3/library/exceptions.html#StopIteration" title=3D"StopI=
teration"><code class=3D"xref py py-exc docutils literal notranslate"><span=
 class=3D"pre">StopIteration</span></code></a> exception raised by
the completing coroutine.  If the asynchronous generator exits without
yielding another value, the awaitable instead raises a
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
xceptions.html#StopAsyncIteration" title=3D"StopAsyncIteration"><code class=
=3D"xref py py-exc docutils literal notranslate"><span class=3D"pre">StopAs=
yncIteration</span></code></a> exception, signalling that the asynchronous
iteration has completed.</p>
<p>This method is normally called implicitly by a <a class=3D"reference int=
ernal" href=3D"https://docs.python.org/3/reference/compound_stmts.html#asyn=
c-for"><code class=3D"xref std std-keyword docutils literal notranslate"><s=
pan class=3D"pre">async</span> <span class=3D"pre">for</span></code></a> lo=
op.</p>
</dd></dl>

<dl class=3D"method">
<dt id=3D"agen.asend">
<em class=3D"property">coroutine </em><code class=3D"sig-prename descclassn=
ame">agen.</code><code class=3D"sig-name descname">asend</code><span class=
=3D"sig-paren">(</span><em class=3D"sig-param">value</em><span class=3D"sig=
-paren">)</span><a class=3D"headerlink" href=3D"https://docs.python.org/3/r=
eference/expressions.html#agen.asend" title=3D"Permalink to this definition=
">=C2=B6</a></dt>
<dd><p>Returns an awaitable which when run resumes the execution of the
asynchronous generator. As with the <a class=3D"reference internal" href=3D=
"https://docs.python.org/3/reference/expressions.html#generator.send" title=
=3D"generator.send"><code class=3D"xref py py-meth docutils literal notrans=
late"><span class=3D"pre">send()</span></code></a> method for a
generator, this =E2=80=9Csends=E2=80=9D a value into the asynchronous gener=
ator function,
and the <em>value</em> argument becomes the result of the current yield exp=
ression.
The awaitable returned by the <a class=3D"reference internal" href=3D"https=
://docs.python.org/3/reference/expressions.html#agen.asend" title=3D"agen.a=
send"><code class=3D"xref py py-meth docutils literal notranslate"><span cl=
ass=3D"pre">asend()</span></code></a> method will return the next
value yielded by the generator as the value of the raised
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
xceptions.html#StopIteration" title=3D"StopIteration"><code class=3D"xref p=
y py-exc docutils literal notranslate"><span class=3D"pre">StopIteration</s=
pan></code></a>, or raises <a class=3D"reference internal" href=3D"https://=
docs.python.org/3/library/exceptions.html#StopAsyncIteration" title=3D"Stop=
AsyncIteration"><code class=3D"xref py py-exc docutils literal notranslate"=
><span class=3D"pre">StopAsyncIteration</span></code></a> if the
asynchronous generator exits without yielding another value.  When
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#agen.asend" title=3D"agen.asend"><code class=3D"xref py p=
y-meth docutils literal notranslate"><span class=3D"pre">asend()</span></co=
de></a> is called to start the asynchronous
generator, it must be called with <a class=3D"reference internal" href=3D"h=
ttps://docs.python.org/3/library/constants.html#None" title=3D"None"><code =
class=3D"xref py py-const docutils literal notranslate"><span class=3D"pre"=
>None</span></code></a> as the argument,
because there is no yield expression that could receive the value.</p>
</dd></dl>

<dl class=3D"method">
<dt id=3D"agen.athrow">
<em class=3D"property">coroutine </em><code class=3D"sig-prename descclassn=
ame">agen.</code><code class=3D"sig-name descname">athrow</code><span class=
=3D"sig-paren">(</span><em class=3D"sig-param">type</em><span class=3D"opti=
onal">[</span>, <em class=3D"sig-param">value</em><span class=3D"optional">=
[</span>, <em class=3D"sig-param">traceback</em><span class=3D"optional">]<=
/span><span class=3D"optional">]</span><span class=3D"sig-paren">)</span><a=
 class=3D"headerlink" href=3D"https://docs.python.org/3/reference/expressio=
ns.html#agen.athrow" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Returns an awaitable that raises an exception of type <code class=3D=
"docutils literal notranslate"><span class=3D"pre">type</span></code> at th=
e point
where the asynchronous generator was paused, and returns the next value
yielded by the generator function as the value of the raised
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
xceptions.html#StopIteration" title=3D"StopIteration"><code class=3D"xref p=
y py-exc docutils literal notranslate"><span class=3D"pre">StopIteration</s=
pan></code></a> exception.  If the asynchronous generator exits
without yielding another value, a <a class=3D"reference internal" href=3D"h=
ttps://docs.python.org/3/library/exceptions.html#StopAsyncIteration" title=
=3D"StopAsyncIteration"><code class=3D"xref py py-exc docutils literal notr=
anslate"><span class=3D"pre">StopAsyncIteration</span></code></a> exception=
 is
raised by the awaitable.
If the generator function does not catch the passed-in exception, or
raises a different exception, then when the awaitable is run that exception
propagates to the caller of the awaitable.</p>
</dd></dl>

<span class=3D"target" id=3D"index-36"></span><dl class=3D"method">
<dt id=3D"agen.aclose">
<em class=3D"property">coroutine </em><code class=3D"sig-prename descclassn=
ame">agen.</code><code class=3D"sig-name descname">aclose</code><span class=
=3D"sig-paren">(</span><span class=3D"sig-paren">)</span><a class=3D"header=
link" href=3D"https://docs.python.org/3/reference/expressions.html#agen.acl=
ose" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Returns an awaitable that when run will throw a <a class=3D"referenc=
e internal" href=3D"https://docs.python.org/3/library/exceptions.html#Gener=
atorExit" title=3D"GeneratorExit"><code class=3D"xref py py-exc docutils li=
teral notranslate"><span class=3D"pre">GeneratorExit</span></code></a> into
the asynchronous generator function at the point where it was paused.
If the asynchronous generator function then exits gracefully, is already
closed, or raises <a class=3D"reference internal" href=3D"https://docs.pyth=
on.org/3/library/exceptions.html#GeneratorExit" title=3D"GeneratorExit"><co=
de class=3D"xref py py-exc docutils literal notranslate"><span class=3D"pre=
">GeneratorExit</span></code></a> (by not catching the exception),
then the returned awaitable will raise a <a class=3D"reference internal" hr=
ef=3D"https://docs.python.org/3/library/exceptions.html#StopIteration" titl=
e=3D"StopIteration"><code class=3D"xref py py-exc docutils literal notransl=
ate"><span class=3D"pre">StopIteration</span></code></a> exception.
Any further awaitables returned by subsequent calls to the asynchronous
generator will raise a <a class=3D"reference internal" href=3D"https://docs=
.python.org/3/library/exceptions.html#StopAsyncIteration" title=3D"StopAsyn=
cIteration"><code class=3D"xref py py-exc docutils literal notranslate"><sp=
an class=3D"pre">StopAsyncIteration</span></code></a> exception.  If the
asynchronous generator yields a value, a <a class=3D"reference internal" hr=
ef=3D"https://docs.python.org/3/library/exceptions.html#RuntimeError" title=
=3D"RuntimeError"><code class=3D"xref py py-exc docutils literal notranslat=
e"><span class=3D"pre">RuntimeError</span></code></a> is raised
by the awaitable.  If the asynchronous generator raises any other exception=
,
it is propagated to the caller of the awaitable.  If the asynchronous
generator has already exited due to an exception or normal exit, then
further calls to <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3/reference/expressions.html#agen.aclose" title=3D"agen.aclose"><code=
 class=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre"=
>aclose()</span></code></a> will return an awaitable that does nothing.</p>
</dd></dl>

</div>
</div>
</div>
<div class=3D"section" id=3D"primaries">
<span id=3D"id4"></span><h2><span class=3D"section-number">6.3. </span>Prim=
aries<a class=3D"headerlink" href=3D"https://docs.python.org/3/reference/ex=
pressions.html#primaries" title=3D"Permalink to this headline">=C2=B6</a></=
h2>
<p id=3D"index-37">Primaries represent the most tightly bound operations of=
 the language. Their
syntax is:</p>
<pre><strong id=3D"grammar-token-primary">primary</strong> ::=3D  <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/reference/express=
ions.html#grammar-token-atom"><code class=3D"xref docutils literal notransl=
ate"><span class=3D"pre">atom</span></code></a> | <a class=3D"reference int=
ernal" href=3D"https://docs.python.org/3/reference/expressions.html#grammar=
-token-attributeref"><code class=3D"xref docutils literal notranslate"><spa=
n class=3D"pre">attributeref</span></code></a> | <a class=3D"reference inte=
rnal" href=3D"https://docs.python.org/3/reference/expressions.html#grammar-=
token-subscription"><code class=3D"xref docutils literal notranslate"><span=
 class=3D"pre">subscription</span></code></a> | <a class=3D"reference inter=
nal" href=3D"https://docs.python.org/3/reference/expressions.html#grammar-t=
oken-slicing"><code class=3D"xref docutils literal notranslate"><span class=
=3D"pre">slicing</span></code></a> | <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/reference/expressions.html#grammar-token-call=
"><code class=3D"xref docutils literal notranslate"><span class=3D"pre">cal=
l</span></code></a>
</pre>
<div class=3D"section" id=3D"attribute-references">
<span id=3D"id5"></span><h3><span class=3D"section-number">6.3.1. </span>At=
tribute references<a class=3D"headerlink" href=3D"https://docs.python.org/3=
/reference/expressions.html#attribute-references" title=3D"Permalink to thi=
s headline">=C2=B6</a></h3>
<p id=3D"index-38">An attribute reference is a primary followed by a period=
 and a name:</p>
<pre><strong id=3D"grammar-token-attributeref">attributeref</strong> ::=3D =
 <a class=3D"reference internal" href=3D"https://docs.python.org/3/referenc=
e/expressions.html#grammar-token-primary"><code class=3D"xref docutils lite=
ral notranslate"><span class=3D"pre">primary</span></code></a> "." <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/reference/lexical=
_analysis.html#grammar-token-identifier"><code class=3D"xref docutils liter=
al notranslate"><span class=3D"pre">identifier</span></code></a>
</pre>
<p id=3D"index-39">The primary must evaluate to an object of a type that su=
pports attribute
references, which most objects do.  This object is then asked to produce th=
e
attribute whose name is the identifier.  This production can be customized =
by
overriding the <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/reference/datamodel.html#object.__getattr__" title=3D"object.__getatt=
r__"><code class=3D"xref py py-meth docutils literal notranslate"><span cla=
ss=3D"pre">__getattr__()</span></code></a> method.  If this attribute is no=
t available,
the exception <a class=3D"reference internal" href=3D"https://docs.python.o=
rg/3/library/exceptions.html#AttributeError" title=3D"AttributeError"><code=
 class=3D"xref py py-exc docutils literal notranslate"><span class=3D"pre">=
AttributeError</span></code></a> is raised.  Otherwise, the type and value =
of
the object produced is determined by the object.  Multiple evaluations of t=
he
same attribute reference may yield different objects.</p>
</div>
<div class=3D"section" id=3D"subscriptions">
<span id=3D"id6"></span><h3><span class=3D"section-number">6.3.2. </span>Su=
bscriptions<a class=3D"headerlink" href=3D"https://docs.python.org/3/refere=
nce/expressions.html#subscriptions" title=3D"Permalink to this headline">=
=C2=B6</a></h3>
<span class=3D"target" id=3D"index-40"></span><p id=3D"index-41">A subscrip=
tion selects an item of a sequence (string, tuple or list) or mapping
(dictionary) object:</p>
<pre><strong id=3D"grammar-token-subscription">subscription</strong> ::=3D =
 <a class=3D"reference internal" href=3D"https://docs.python.org/3/referenc=
e/expressions.html#grammar-token-primary"><code class=3D"xref docutils lite=
ral notranslate"><span class=3D"pre">primary</span></code></a> "[" <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/reference/express=
ions.html#grammar-token-expression-list"><code class=3D"xref docutils liter=
al notranslate"><span class=3D"pre">expression_list</span></code></a> "]"
</pre>
<p>The primary must evaluate to an object that supports subscription (lists=
 or
dictionaries for example).  User-defined objects can support subscription b=
y
defining a <a class=3D"reference internal" href=3D"https://docs.python.org/=
3/reference/datamodel.html#object.__getitem__" title=3D"object.__getitem__"=
><code class=3D"xref py py-meth docutils literal notranslate"><span class=
=3D"pre">__getitem__()</span></code></a> method.</p>
<p>For built-in objects, there are two types of objects that support subscr=
iption:</p>
<p>If the primary is a mapping, the expression list must evaluate to an obj=
ect
whose value is one of the keys of the mapping, and the subscription selects=
 the
value in the mapping that corresponds to that key.  (The expression list is=
 a
tuple except if it has exactly one item.)</p>
<p>If the primary is a sequence, the expression list must evaluate to an in=
teger
or a slice (as discussed in the following section).</p>
<p>The formal syntax makes no special provision for negative indices in
sequences; however, built-in sequences all provide a <a class=3D"reference =
internal" href=3D"https://docs.python.org/3/reference/datamodel.html#object=
.__getitem__" title=3D"object.__getitem__"><code class=3D"xref py py-meth d=
ocutils literal notranslate"><span class=3D"pre">__getitem__()</span></code=
></a>
method that interprets negative indices by adding the length of the sequenc=
e
to the index (so that <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">x[-1]</span></code> selects the last item of <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">x</span></code>).  The
resulting value must be a nonnegative integer less than the number of items=
 in
the sequence, and the subscription selects the item whose index is that val=
ue
(counting from zero). Since the support for negative indices and slicing
occurs in the object=E2=80=99s <a class=3D"reference internal" href=3D"http=
s://docs.python.org/3/reference/datamodel.html#object.__getitem__" title=3D=
"object.__getitem__"><code class=3D"xref py py-meth docutils literal notran=
slate"><span class=3D"pre">__getitem__()</span></code></a> method, subclass=
es overriding
this method will need to explicitly add that support.</p>
<p id=3D"index-42">A string=E2=80=99s items are characters.  A character is=
 not a separate data type but a
string of exactly one character.</p>
</div>
<div class=3D"section" id=3D"slicings">
<span id=3D"id7"></span><h3><span class=3D"section-number">6.3.3. </span>Sl=
icings<a class=3D"headerlink" href=3D"https://docs.python.org/3/reference/e=
xpressions.html#slicings" title=3D"Permalink to this headline">=C2=B6</a></=
h3>
<span class=3D"target" id=3D"index-43"></span><p id=3D"index-44">A slicing =
selects a range of items in a sequence object (e.g., a string, tuple
or list).  Slicings may be used as expressions or as targets in assignment =
or
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/simple_stmts.html#del"><code class=3D"xref std std-keyword docutils litera=
l notranslate"><span class=3D"pre">del</span></code></a> statements.  The s=
yntax for a slicing:</p>
<pre><strong id=3D"grammar-token-slicing">slicing     </strong> ::=3D  <a c=
lass=3D"reference internal" href=3D"https://docs.python.org/3/reference/exp=
ressions.html#grammar-token-primary"><code class=3D"xref docutils literal n=
otranslate"><span class=3D"pre">primary</span></code></a> "[" <a class=3D"r=
eference internal" href=3D"https://docs.python.org/3/reference/expressions.=
html#grammar-token-slice-list"><code class=3D"xref docutils literal notrans=
late"><span class=3D"pre">slice_list</span></code></a> "]"
<strong id=3D"grammar-token-slice-list">slice_list  </strong> ::=3D  <a cla=
ss=3D"reference internal" href=3D"https://docs.python.org/3/reference/expre=
ssions.html#grammar-token-slice-item"><code class=3D"xref docutils literal =
notranslate"><span class=3D"pre">slice_item</span></code></a> ("," <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/reference/express=
ions.html#grammar-token-slice-item"><code class=3D"xref docutils literal no=
translate"><span class=3D"pre">slice_item</span></code></a>)* [","]
<strong id=3D"grammar-token-slice-item">slice_item  </strong> ::=3D  <a cla=
ss=3D"reference internal" href=3D"https://docs.python.org/3/reference/expre=
ssions.html#grammar-token-expression"><code class=3D"xref docutils literal =
notranslate"><span class=3D"pre">expression</span></code></a> | <a class=3D=
"reference internal" href=3D"https://docs.python.org/3/reference/expression=
s.html#grammar-token-proper-slice"><code class=3D"xref docutils literal not=
ranslate"><span class=3D"pre">proper_slice</span></code></a>
<strong id=3D"grammar-token-proper-slice">proper_slice</strong> ::=3D  [<a =
class=3D"reference internal" href=3D"https://docs.python.org/3/reference/ex=
pressions.html#grammar-token-lower-bound"><code class=3D"xref docutils lite=
ral notranslate"><span class=3D"pre">lower_bound</span></code></a>] ":" [<a=
 class=3D"reference internal" href=3D"https://docs.python.org/3/reference/e=
xpressions.html#grammar-token-upper-bound"><code class=3D"xref docutils lit=
eral notranslate"><span class=3D"pre">upper_bound</span></code></a>] [ ":" =
[<a class=3D"reference internal" href=3D"https://docs.python.org/3/referenc=
e/expressions.html#grammar-token-stride"><code class=3D"xref docutils liter=
al notranslate"><span class=3D"pre">stride</span></code></a>] ]
<strong id=3D"grammar-token-lower-bound">lower_bound </strong> ::=3D  <a cl=
ass=3D"reference internal" href=3D"https://docs.python.org/3/reference/expr=
essions.html#grammar-token-expression"><code class=3D"xref docutils literal=
 notranslate"><span class=3D"pre">expression</span></code></a>
<strong id=3D"grammar-token-upper-bound">upper_bound </strong> ::=3D  <a cl=
ass=3D"reference internal" href=3D"https://docs.python.org/3/reference/expr=
essions.html#grammar-token-expression"><code class=3D"xref docutils literal=
 notranslate"><span class=3D"pre">expression</span></code></a>
<strong id=3D"grammar-token-stride">stride      </strong> ::=3D  <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/reference/express=
ions.html#grammar-token-expression"><code class=3D"xref docutils literal no=
translate"><span class=3D"pre">expression</span></code></a>
</pre>
<p>There is ambiguity in the formal syntax here: anything that looks like a=
n
expression list also looks like a slice list, so any subscription can be
interpreted as a slicing.  Rather than further complicating the syntax, thi=
s is
disambiguated by defining that in this case the interpretation as a subscri=
ption
takes priority over the interpretation as a slicing (this is the case if th=
e
slice list contains no proper slice).</p>
<p id=3D"index-45">The semantics for a slicing are as follows.  The primary=
 is indexed (using the
same <a class=3D"reference internal" href=3D"https://docs.python.org/3/refe=
rence/datamodel.html#object.__getitem__" title=3D"object.__getitem__"><code=
 class=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre"=
>__getitem__()</span></code></a> method as
normal subscription) with a key that is constructed from the slice list, as
follows.  If the slice list contains at least one comma, the key is a tuple
containing the conversion of the slice items; otherwise, the conversion of =
the
lone slice item is the key.  The conversion of a slice item that is an
expression is that expression.  The conversion of a proper slice is a slice
object (see section <a class=3D"reference internal" href=3D"https://docs.py=
thon.org/3/reference/datamodel.html#types"><span class=3D"std std-ref">The =
standard type hierarchy</span></a>) whose <code class=3D"xref py py-attr do=
cutils literal notranslate"><span class=3D"pre">start</span></code>,
<code class=3D"xref py py-attr docutils literal notranslate"><span class=3D=
"pre">stop</span></code> and <code class=3D"xref py py-attr docutils litera=
l notranslate"><span class=3D"pre">step</span></code> attributes are the va=
lues of the
expressions given as lower bound, upper bound and stride, respectively,
substituting <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">None</span></code> for missing expressions.</p>
</div>
<div class=3D"section" id=3D"calls">
<span id=3D"index-46"></span><span id=3D"id8"></span><h3><span class=3D"sec=
tion-number">6.3.4. </span>Calls<a class=3D"headerlink" href=3D"https://doc=
s.python.org/3/reference/expressions.html#calls" title=3D"Permalink to this=
 headline">=C2=B6</a></h3>
<p>A call calls a callable object (e.g., a <a class=3D"reference internal" =
href=3D"https://docs.python.org/3/glossary.html#term-function"><span class=
=3D"xref std std-term">function</span></a>) with a possibly empty
series of <a class=3D"reference internal" href=3D"https://docs.python.org/3=
/glossary.html#term-argument"><span class=3D"xref std std-term">arguments</=
span></a>:</p>
<pre><strong id=3D"grammar-token-call">call                </strong> ::=3D =
 <a class=3D"reference internal" href=3D"https://docs.python.org/3/referenc=
e/expressions.html#grammar-token-primary"><code class=3D"xref docutils lite=
ral notranslate"><span class=3D"pre">primary</span></code></a> "(" [<a clas=
s=3D"reference internal" href=3D"https://docs.python.org/3/reference/expres=
sions.html#grammar-token-argument-list"><code class=3D"xref docutils litera=
l notranslate"><span class=3D"pre">argument_list</span></code></a> [","] | =
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#grammar-token-comprehension"><code class=3D"xref docutils=
 literal notranslate"><span class=3D"pre">comprehension</span></code></a>] =
")"
<strong id=3D"grammar-token-argument-list">argument_list       </strong> ::=
=3D  <a class=3D"reference internal" href=3D"https://docs.python.org/3/refe=
rence/expressions.html#grammar-token-positional-arguments"><code class=3D"x=
ref docutils literal notranslate"><span class=3D"pre">positional_arguments<=
/span></code></a> ["," <a class=3D"reference internal" href=3D"https://docs=
.python.org/3/reference/expressions.html#grammar-token-starred-and-keywords=
"><code class=3D"xref docutils literal notranslate"><span class=3D"pre">sta=
rred_and_keywords</span></code></a>]
                            ["," <a class=3D"reference internal" href=3D"ht=
tps://docs.python.org/3/reference/expressions.html#grammar-token-keywords-a=
rguments"><code class=3D"xref docutils literal notranslate"><span class=3D"=
pre">keywords_arguments</span></code></a>]
                          | <a class=3D"reference internal" href=3D"https:/=
/docs.python.org/3/reference/expressions.html#grammar-token-starred-and-key=
words"><code class=3D"xref docutils literal notranslate"><span class=3D"pre=
">starred_and_keywords</span></code></a> ["," <a class=3D"reference interna=
l" href=3D"https://docs.python.org/3/reference/expressions.html#grammar-tok=
en-keywords-arguments"><code class=3D"xref docutils literal notranslate"><s=
pan class=3D"pre">keywords_arguments</span></code></a>]
                          | <a class=3D"reference internal" href=3D"https:/=
/docs.python.org/3/reference/expressions.html#grammar-token-keywords-argume=
nts"><code class=3D"xref docutils literal notranslate"><span class=3D"pre">=
keywords_arguments</span></code></a>
<strong id=3D"grammar-token-positional-arguments">positional_arguments</str=
ong> ::=3D  ["*"] <a class=3D"reference internal" href=3D"https://docs.pyth=
on.org/3/reference/expressions.html#grammar-token-expression"><code class=
=3D"xref docutils literal notranslate"><span class=3D"pre">expression</span=
></code></a> ("," ["*"] <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/reference/expressions.html#grammar-token-expression"><code c=
lass=3D"xref docutils literal notranslate"><span class=3D"pre">expression</=
span></code></a>)*
<strong id=3D"grammar-token-starred-and-keywords">starred_and_keywords</str=
ong> ::=3D  ("*" <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3/reference/expressions.html#grammar-token-expression"><code class=3D=
"xref docutils literal notranslate"><span class=3D"pre">expression</span></=
code></a> | <a class=3D"reference internal" href=3D"https://docs.python.org=
/3/reference/expressions.html#grammar-token-keyword-item"><code class=3D"xr=
ef docutils literal notranslate"><span class=3D"pre">keyword_item</span></c=
ode></a>)
                          ("," "*" <a class=3D"reference internal" href=3D"=
https://docs.python.org/3/reference/expressions.html#grammar-token-expressi=
on"><code class=3D"xref docutils literal notranslate"><span class=3D"pre">e=
xpression</span></code></a> | "," <a class=3D"reference internal" href=3D"h=
ttps://docs.python.org/3/reference/expressions.html#grammar-token-keyword-i=
tem"><code class=3D"xref docutils literal notranslate"><span class=3D"pre">=
keyword_item</span></code></a>)*
<strong id=3D"grammar-token-keywords-arguments">keywords_arguments  </stron=
g> ::=3D  (<a class=3D"reference internal" href=3D"https://docs.python.org/=
3/reference/expressions.html#grammar-token-keyword-item"><code class=3D"xre=
f docutils literal notranslate"><span class=3D"pre">keyword_item</span></co=
de></a> | "**" <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/reference/expressions.html#grammar-token-expression"><code class=3D"x=
ref docutils literal notranslate"><span class=3D"pre">expression</span></co=
de></a>)
                          ("," <a class=3D"reference internal" href=3D"http=
s://docs.python.org/3/reference/expressions.html#grammar-token-keyword-item=
"><code class=3D"xref docutils literal notranslate"><span class=3D"pre">key=
word_item</span></code></a> | "," "**" <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/reference/expressions.html#grammar-token-expr=
ession"><code class=3D"xref docutils literal notranslate"><span class=3D"pr=
e">expression</span></code></a>)*
<strong id=3D"grammar-token-keyword-item">keyword_item        </strong> ::=
=3D  <a class=3D"reference internal" href=3D"https://docs.python.org/3/refe=
rence/lexical_analysis.html#grammar-token-identifier"><code class=3D"xref d=
ocutils literal notranslate"><span class=3D"pre">identifier</span></code></=
a> "=3D" <a class=3D"reference internal" href=3D"https://docs.python.org/3/=
reference/expressions.html#grammar-token-expression"><code class=3D"xref do=
cutils literal notranslate"><span class=3D"pre">expression</span></code></a=
>
</pre>
<p>An optional trailing comma may be present after the positional and keywo=
rd arguments
but does not affect the semantics.</p>
<p id=3D"index-47">The primary must evaluate to a callable object (user-def=
ined functions, built-in
functions, methods of built-in objects, class objects, methods of class
instances, and all objects having a <a class=3D"reference internal" href=3D=
"https://docs.python.org/3/reference/datamodel.html#object.__call__" title=
=3D"object.__call__"><code class=3D"xref py py-meth docutils literal notran=
slate"><span class=3D"pre">__call__()</span></code></a> method are callable=
).  All
argument expressions are evaluated before the call is attempted.  Please re=
fer
to section <a class=3D"reference internal" href=3D"https://docs.python.org/=
3/reference/compound_stmts.html#function"><span class=3D"std std-ref">Funct=
ion definitions</span></a> for the syntax of formal <a class=3D"reference i=
nternal" href=3D"https://docs.python.org/3/glossary.html#term-parameter"><s=
pan class=3D"xref std std-term">parameter</span></a> lists.</p>
<p>If keyword arguments are present, they are first converted to positional
arguments, as follows.  First, a list of unfilled slots is created for the
formal parameters.  If there are N positional arguments, they are placed in=
 the
first N slots.  Next, for each keyword argument, the identifier is used to
determine the corresponding slot (if the identifier is the same as the firs=
t
formal parameter name, the first slot is used, and so on).  If the slot is
already filled, a <a class=3D"reference internal" href=3D"https://docs.pyth=
on.org/3/library/exceptions.html#TypeError" title=3D"TypeError"><code class=
=3D"xref py py-exc docutils literal notranslate"><span class=3D"pre">TypeEr=
ror</span></code></a> exception is raised. Otherwise, the value of
the argument is placed in the slot, filling it (even if the expression is
<code class=3D"docutils literal notranslate"><span class=3D"pre">None</span=
></code>, it fills the slot).  When all arguments have been processed, the =
slots
that are still unfilled are filled with the corresponding default value fro=
m the
function definition.  (Default values are calculated, once, when the functi=
on is
defined; thus, a mutable object such as a list or dictionary used as defaul=
t
value will be shared by all calls that don=E2=80=99t specify an argument va=
lue for the
corresponding slot; this should usually be avoided.)  If there are any unfi=
lled
slots for which no default value is specified, a <a class=3D"reference inte=
rnal" href=3D"https://docs.python.org/3/library/exceptions.html#TypeError" =
title=3D"TypeError"><code class=3D"xref py py-exc docutils literal notransl=
ate"><span class=3D"pre">TypeError</span></code></a> exception is
raised.  Otherwise, the list of filled slots is used as the argument list f=
or
the call.</p>
<div class=3D"impl-detail compound">
<p><strong>CPython implementation detail:</strong> An implementation may pr=
ovide built-in functions whose positional parameters
do not have names, even if they are =E2=80=98named=E2=80=99 for the purpose=
 of documentation,
and which therefore cannot be supplied by keyword.  In CPython, this is the
case for functions implemented in C that use <a class=3D"reference internal=
" href=3D"https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTuple" titl=
e=3D"PyArg_ParseTuple"><code class=3D"xref c c-func docutils literal notran=
slate"><span class=3D"pre">PyArg_ParseTuple()</span></code></a> to
parse their arguments.</p>
</div>
<p>If there are more positional arguments than there are formal parameter s=
lots, a
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
xceptions.html#TypeError" title=3D"TypeError"><code class=3D"xref py py-exc=
 docutils literal notranslate"><span class=3D"pre">TypeError</span></code><=
/a> exception is raised, unless a formal parameter using the syntax
<code class=3D"docutils literal notranslate"><span class=3D"pre">*identifie=
r</span></code> is present; in this case, that formal parameter receives a =
tuple
containing the excess positional arguments (or an empty tuple if there were=
 no
excess positional arguments).</p>
<p>If any keyword argument does not correspond to a formal parameter name, =
a
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
xceptions.html#TypeError" title=3D"TypeError"><code class=3D"xref py py-exc=
 docutils literal notranslate"><span class=3D"pre">TypeError</span></code><=
/a> exception is raised, unless a formal parameter using the syntax
<code class=3D"docutils literal notranslate"><span class=3D"pre">**identifi=
er</span></code> is present; in this case, that formal parameter receives a
dictionary containing the excess keyword arguments (using the keywords as k=
eys
and the argument values as corresponding values), or a (new) empty dictiona=
ry if
there were no excess keyword arguments.</p>
<p id=3D"index-48">If the syntax <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">*expression</span></code> appears in the function ca=
ll, <code class=3D"docutils literal notranslate"><span class=3D"pre">expres=
sion</span></code> must
evaluate to an <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/glossary.html#term-iterable"><span class=3D"xref std std-term">iterab=
le</span></a>.  Elements from these iterables are
treated as if they were additional positional arguments.  For the call
<code class=3D"docutils literal notranslate"><span class=3D"pre">f(x1,</spa=
n> <span class=3D"pre">x2,</span> <span class=3D"pre">*y,</span> <span clas=
s=3D"pre">x3,</span> <span class=3D"pre">x4)</span></code>, if <em>y</em> e=
valuates to a sequence <em>y1</em>, =E2=80=A6, <em>yM</em>,
this is equivalent to a call with M+4 positional arguments <em>x1</em>, <em=
>x2</em>,
<em>y1</em>, =E2=80=A6, <em>yM</em>, <em>x3</em>, <em>x4</em>.</p>
<p>A consequence of this is that although the <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">*expression</span></code> syntax may ap=
pear
<em>after</em> explicit keyword arguments, it is processed <em>before</em> =
the
keyword arguments (and any <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">**expression</span></code> arguments =E2=80=93 see below).=
  So:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><span class=3D"copybutton" title=3D"Hide the promp=
ts and output" style=3D"cursor: pointer; position: absolute; top: 0px; righ=
t: 0px; border-color: rgb(170, 204, 153); border-style: solid; border-width=
: 0.990566px; color: rgb(170, 204, 153); font-family: monospace; padding-le=
ft: 0.2em; padding-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&=
gt;</span><pre><span></span><span class=3D"gp">&gt;&gt;&gt; </span><span cl=
ass=3D"k">def</span> <span class=3D"nf">f</span><span class=3D"p">(</span><=
span class=3D"n">a</span><span class=3D"p">,</span> <span class=3D"n">b</sp=
an><span class=3D"p">):</span>
<span class=3D"gp">... </span>    <span class=3D"nb">print</span><span clas=
s=3D"p">(</span><span class=3D"n">a</span><span class=3D"p">,</span> <span =
class=3D"n">b</span><span class=3D"p">)</span>
<span class=3D"gp">...</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">f</span><span clas=
s=3D"p">(</span><span class=3D"n">b</span><span class=3D"o">=3D</span><span=
 class=3D"mi">1</span><span class=3D"p">,</span> <span class=3D"o">*</span>=
<span class=3D"p">(</span><span class=3D"mi">2</span><span class=3D"p">,))<=
/span>
<span class=3D"go">2 1</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">f</span><span clas=
s=3D"p">(</span><span class=3D"n">a</span><span class=3D"o">=3D</span><span=
 class=3D"mi">1</span><span class=3D"p">,</span> <span class=3D"o">*</span>=
<span class=3D"p">(</span><span class=3D"mi">2</span><span class=3D"p">,))<=
/span>
<span class=3D"gt">Traceback (most recent call last):</span><span>
  File </span><span class=3D"nb">"&lt;stdin&gt;"</span><span>, line </span>=
<span class=3D"m">1</span><span>, in </span><span class=3D"n">&lt;module&gt=
;</span>
<span class=3D"gr">TypeError</span><span>: </span><span class=3D"n">f() got=
 multiple values for keyword argument 'a'</span>
<span class=3D"gp">&gt;&gt;&gt; </span><span class=3D"n">f</span><span clas=
s=3D"p">(</span><span class=3D"mi">1</span><span class=3D"p">,</span> <span=
 class=3D"o">*</span><span class=3D"p">(</span><span class=3D"mi">2</span><=
span class=3D"p">,))</span>
<span class=3D"go">1 2</span>
</pre></div>
</div>
<p>It is unusual for both keyword arguments and the <code class=3D"docutils=
 literal notranslate"><span class=3D"pre">*expression</span></code> syntax =
to be
used in the same call, so in practice this confusion does not arise.</p>
<p id=3D"index-49">If the syntax <code class=3D"docutils literal notranslat=
e"><span class=3D"pre">**expression</span></code> appears in the function c=
all, <code class=3D"docutils literal notranslate"><span class=3D"pre">expre=
ssion</span></code> must
evaluate to a <a class=3D"reference internal" href=3D"https://docs.python.o=
rg/3/glossary.html#term-mapping"><span class=3D"xref std std-term">mapping<=
/span></a>, the contents of which are treated as
additional keyword arguments.  If a keyword is already present
(as an explicit keyword argument, or from another unpacking),
a <a class=3D"reference internal" href=3D"https://docs.python.org/3/library=
/exceptions.html#TypeError" title=3D"TypeError"><code class=3D"xref py py-e=
xc docutils literal notranslate"><span class=3D"pre">TypeError</span></code=
></a> exception is raised.</p>
<p>Formal parameters using the syntax <code class=3D"docutils literal notra=
nslate"><span class=3D"pre">*identifier</span></code> or <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">**identifier</span></code> c=
annot be
used as positional argument slots or as keyword argument names.</p>
<div class=3D"versionchanged">
<p><span class=3D"versionmodified changed">Changed in version 3.5: </span>F=
unction calls accept any number of <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">*</span></code> and <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">**</span></code> unpackings,
positional arguments may follow iterable unpackings (<code class=3D"docutil=
s literal notranslate"><span class=3D"pre">*</span></code>),
and keyword arguments may follow dictionary unpackings (<code class=3D"docu=
tils literal notranslate"><span class=3D"pre">**</span></code>).
Originally proposed by <span class=3D"target" id=3D"index-50"></span><a cla=
ss=3D"pep reference external" href=3D"https://www.python.org/dev/peps/pep-0=
448"><strong>PEP 448</strong></a>.</p>
</div>
<p>A call always returns some value, possibly <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">None</span></code>, unless it raises an
exception.  How this value is computed depends on the type of the callable
object.</p>
<p>If it is=E2=80=94</p>
<dl>
<dt>a user-defined function:</dt><dd><p id=3D"index-51">The code block for =
the function is executed, passing it the argument list.  The
first thing the code block will do is bind the formal parameters to the
arguments; this is described in section <a class=3D"reference internal" hre=
f=3D"https://docs.python.org/3/reference/compound_stmts.html#function"><spa=
n class=3D"std std-ref">Function definitions</span></a>.  When the code blo=
ck
executes a <a class=3D"reference internal" href=3D"https://docs.python.org/=
3/reference/simple_stmts.html#return"><code class=3D"xref std std-keyword d=
ocutils literal notranslate"><span class=3D"pre">return</span></code></a> s=
tatement, this specifies the return value of the
function call.</p>
</dd>
<dt>a built-in function or method:</dt><dd><p id=3D"index-52">The result is=
 up to the interpreter; see <a class=3D"reference internal" href=3D"https:/=
/docs.python.org/3/library/functions.html#built-in-funcs"><span class=3D"st=
d std-ref">Built-in Functions</span></a> for the
descriptions of built-in functions and methods.</p>
</dd>
<dt>a class object:</dt><dd><p id=3D"index-53">A new instance of that class=
 is returned.</p>
</dd>
<dt>a class instance method:</dt><dd><p id=3D"index-54">The corresponding u=
ser-defined function is called, with an argument list that is
one longer than the argument list of the call: the instance becomes the fir=
st
argument.</p>
</dd>
<dt>a class instance:</dt><dd><p id=3D"index-55">The class must define a <a=
 class=3D"reference internal" href=3D"https://docs.python.org/3/reference/d=
atamodel.html#object.__call__" title=3D"object.__call__"><code class=3D"xre=
f py py-meth docutils literal notranslate"><span class=3D"pre">__call__()</=
span></code></a> method; the effect is then the same as
if that method was called.</p>
</dd>
</dl>
</div>
</div>
<div class=3D"section" id=3D"await-expression">
<span id=3D"await"></span><span id=3D"index-56"></span><h2><span class=3D"s=
ection-number">6.4. </span>Await expression<a class=3D"headerlink" href=3D"=
https://docs.python.org/3/reference/expressions.html#await-expression" titl=
e=3D"Permalink to this headline">=C2=B6</a></h2>
<p>Suspend the execution of <a class=3D"reference internal" href=3D"https:/=
/docs.python.org/3/glossary.html#term-coroutine"><span class=3D"xref std st=
d-term">coroutine</span></a> on an <a class=3D"reference internal" href=3D"=
https://docs.python.org/3/glossary.html#term-awaitable"><span class=3D"xref=
 std std-term">awaitable</span></a> object.
Can only be used inside a <a class=3D"reference internal" href=3D"https://d=
ocs.python.org/3/glossary.html#term-coroutine-function"><span class=3D"xref=
 std std-term">coroutine function</span></a>.</p>
<pre><strong id=3D"grammar-token-await-expr">await_expr</strong> ::=3D  "aw=
ait" <a class=3D"reference internal" href=3D"https://docs.python.org/3/refe=
rence/expressions.html#grammar-token-primary"><code class=3D"xref docutils =
literal notranslate"><span class=3D"pre">primary</span></code></a>
</pre>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">New in version 3.5.</span></p>
</div>
</div>
<div class=3D"section" id=3D"the-power-operator">
<span id=3D"power"></span><h2><span class=3D"section-number">6.5. </span>Th=
e power operator<a class=3D"headerlink" href=3D"https://docs.python.org/3/r=
eference/expressions.html#the-power-operator" title=3D"Permalink to this he=
adline">=C2=B6</a></h2>
<p id=3D"index-57">The power operator binds more tightly than unary operato=
rs on its left; it binds
less tightly than unary operators on its right.  The syntax is:</p>
<pre><strong id=3D"grammar-token-power">power</strong> ::=3D  (<a class=3D"=
reference internal" href=3D"https://docs.python.org/3/reference/expressions=
.html#grammar-token-await-expr"><code class=3D"xref docutils literal notran=
slate"><span class=3D"pre">await_expr</span></code></a> | <a class=3D"refer=
ence internal" href=3D"https://docs.python.org/3/reference/expressions.html=
#grammar-token-primary"><code class=3D"xref docutils literal notranslate"><=
span class=3D"pre">primary</span></code></a>) ["**" <a class=3D"reference i=
nternal" href=3D"https://docs.python.org/3/reference/expressions.html#gramm=
ar-token-u-expr"><code class=3D"xref docutils literal notranslate"><span cl=
ass=3D"pre">u_expr</span></code></a>]
</pre>
<p>Thus, in an unparenthesized sequence of power and unary operators, the o=
perators
are evaluated from right to left (this does not constrain the evaluation or=
der
for the operands): <code class=3D"docutils literal notranslate"><span class=
=3D"pre">-1**2</span></code> results in <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">-1</span></code>.</p>
<p>The power operator has the same semantics as the built-in <a class=3D"re=
ference internal" href=3D"https://docs.python.org/3/library/functions.html#=
pow" title=3D"pow"><code class=3D"xref py py-func docutils literal notransl=
ate"><span class=3D"pre">pow()</span></code></a> function,
when called with two arguments: it yields its left argument raised to the p=
ower
of its right argument.  The numeric arguments are first converted to a comm=
on
type, and the result is of that type.</p>
<p>For int operands, the result has the same type as the operands unless th=
e second
argument is negative; in that case, all arguments are converted to float an=
d a
float result is delivered. For example, <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">10**2</span></code> returns <code class=3D"do=
cutils literal notranslate"><span class=3D"pre">100</span></code>, but
<code class=3D"docutils literal notranslate"><span class=3D"pre">10**-2</sp=
an></code> returns <code class=3D"docutils literal notranslate"><span class=
=3D"pre">0.01</span></code>.</p>
<p>Raising <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>0.0</span></code> to a negative power results in a <a class=3D"reference i=
nternal" href=3D"https://docs.python.org/3/library/exceptions.html#ZeroDivi=
sionError" title=3D"ZeroDivisionError"><code class=3D"xref py py-exc docuti=
ls literal notranslate"><span class=3D"pre">ZeroDivisionError</span></code>=
</a>.
Raising a negative number to a fractional power results in a <a class=3D"re=
ference internal" href=3D"https://docs.python.org/3/library/functions.html#=
complex" title=3D"complex"><code class=3D"xref py py-class docutils literal=
 notranslate"><span class=3D"pre">complex</span></code></a>
number. (In earlier versions it raised a <a class=3D"reference internal" hr=
ef=3D"https://docs.python.org/3/library/exceptions.html#ValueError" title=
=3D"ValueError"><code class=3D"xref py py-exc docutils literal notranslate"=
><span class=3D"pre">ValueError</span></code></a>.)</p>
</div>
<div class=3D"section" id=3D"unary-arithmetic-and-bitwise-operations">
<span id=3D"unary"></span><h2><span class=3D"section-number">6.6. </span>Un=
ary arithmetic and bitwise operations<a class=3D"headerlink" href=3D"https:=
//docs.python.org/3/reference/expressions.html#unary-arithmetic-and-bitwise=
-operations" title=3D"Permalink to this headline">=C2=B6</a></h2>
<p id=3D"index-58">All unary arithmetic and bitwise operations have the sam=
e priority:</p>
<pre><strong id=3D"grammar-token-u-expr">u_expr</strong> ::=3D  <a class=3D=
"reference internal" href=3D"https://docs.python.org/3/reference/expression=
s.html#grammar-token-power"><code class=3D"xref docutils literal notranslat=
e"><span class=3D"pre">power</span></code></a> | "-" <a class=3D"reference =
internal" href=3D"https://docs.python.org/3/reference/expressions.html#gram=
mar-token-u-expr"><code class=3D"xref docutils literal notranslate"><span c=
lass=3D"pre">u_expr</span></code></a> | "+" <a class=3D"reference internal"=
 href=3D"https://docs.python.org/3/reference/expressions.html#grammar-token=
-u-expr"><code class=3D"xref docutils literal notranslate"><span class=3D"p=
re">u_expr</span></code></a> | "~" <a class=3D"reference internal" href=3D"=
https://docs.python.org/3/reference/expressions.html#grammar-token-u-expr">=
<code class=3D"xref docutils literal notranslate"><span class=3D"pre">u_exp=
r</span></code></a>
</pre>
<p id=3D"index-59">The unary <code class=3D"docutils literal notranslate"><=
span class=3D"pre">-</span></code> (minus) operator yields the negation of =
its numeric argument.</p>
<p id=3D"index-60">The unary <code class=3D"docutils literal notranslate"><=
span class=3D"pre">+</span></code> (plus) operator yields its numeric argum=
ent unchanged.</p>
<p id=3D"index-61">The unary <code class=3D"docutils literal notranslate"><=
span class=3D"pre">~</span></code> (invert) operator yields the bitwise inv=
ersion of its integer
argument.  The bitwise inversion of <code class=3D"docutils literal notrans=
late"><span class=3D"pre">x</span></code> is defined as <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">-(x+1)</span></code>.  It onl=
y
applies to integral numbers.</p>
<p id=3D"index-62">In all three cases, if the argument does not have the pr=
oper type, a
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
xceptions.html#TypeError" title=3D"TypeError"><code class=3D"xref py py-exc=
 docutils literal notranslate"><span class=3D"pre">TypeError</span></code><=
/a> exception is raised.</p>
</div>
<div class=3D"section" id=3D"binary-arithmetic-operations">
<span id=3D"binary"></span><h2><span class=3D"section-number">6.7. </span>B=
inary arithmetic operations<a class=3D"headerlink" href=3D"https://docs.pyt=
hon.org/3/reference/expressions.html#binary-arithmetic-operations" title=3D=
"Permalink to this headline">=C2=B6</a></h2>
<p id=3D"index-63">The binary arithmetic operations have the conventional p=
riority levels.  Note
that some of these operations also apply to certain non-numeric types.  Apa=
rt
from the power operator, there are only two levels, one for multiplicative
operators and one for additive operators:</p>
<pre><strong id=3D"grammar-token-m-expr">m_expr</strong> ::=3D  <a class=3D=
"reference internal" href=3D"https://docs.python.org/3/reference/expression=
s.html#grammar-token-u-expr"><code class=3D"xref docutils literal notransla=
te"><span class=3D"pre">u_expr</span></code></a> | <a class=3D"reference in=
ternal" href=3D"https://docs.python.org/3/reference/expressions.html#gramma=
r-token-m-expr"><code class=3D"xref docutils literal notranslate"><span cla=
ss=3D"pre">m_expr</span></code></a> "*" <a class=3D"reference internal" hre=
f=3D"https://docs.python.org/3/reference/expressions.html#grammar-token-u-e=
xpr"><code class=3D"xref docutils literal notranslate"><span class=3D"pre">=
u_expr</span></code></a> | <a class=3D"reference internal" href=3D"https://=
docs.python.org/3/reference/expressions.html#grammar-token-m-expr"><code cl=
ass=3D"xref docutils literal notranslate"><span class=3D"pre">m_expr</span>=
</code></a> "@" <a class=3D"reference internal" href=3D"https://docs.python=
.org/3/reference/expressions.html#grammar-token-m-expr"><code class=3D"xref=
 docutils literal notranslate"><span class=3D"pre">m_expr</span></code></a>=
 |
            <a class=3D"reference internal" href=3D"https://docs.python.org=
/3/reference/expressions.html#grammar-token-m-expr"><code class=3D"xref doc=
utils literal notranslate"><span class=3D"pre">m_expr</span></code></a> "//=
" <a class=3D"reference internal" href=3D"https://docs.python.org/3/referen=
ce/expressions.html#grammar-token-u-expr"><code class=3D"xref docutils lite=
ral notranslate"><span class=3D"pre">u_expr</span></code></a> | <a class=3D=
"reference internal" href=3D"https://docs.python.org/3/reference/expression=
s.html#grammar-token-m-expr"><code class=3D"xref docutils literal notransla=
te"><span class=3D"pre">m_expr</span></code></a> "/" <a class=3D"reference =
internal" href=3D"https://docs.python.org/3/reference/expressions.html#gram=
mar-token-u-expr"><code class=3D"xref docutils literal notranslate"><span c=
lass=3D"pre">u_expr</span></code></a> |
            <a class=3D"reference internal" href=3D"https://docs.python.org=
/3/reference/expressions.html#grammar-token-m-expr"><code class=3D"xref doc=
utils literal notranslate"><span class=3D"pre">m_expr</span></code></a> "%"=
 <a class=3D"reference internal" href=3D"https://docs.python.org/3/referenc=
e/expressions.html#grammar-token-u-expr"><code class=3D"xref docutils liter=
al notranslate"><span class=3D"pre">u_expr</span></code></a>
<strong id=3D"grammar-token-a-expr">a_expr</strong> ::=3D  <a class=3D"refe=
rence internal" href=3D"https://docs.python.org/3/reference/expressions.htm=
l#grammar-token-m-expr"><code class=3D"xref docutils literal notranslate"><=
span class=3D"pre">m_expr</span></code></a> | <a class=3D"reference interna=
l" href=3D"https://docs.python.org/3/reference/expressions.html#grammar-tok=
en-a-expr"><code class=3D"xref docutils literal notranslate"><span class=3D=
"pre">a_expr</span></code></a> "+" <a class=3D"reference internal" href=3D"=
https://docs.python.org/3/reference/expressions.html#grammar-token-m-expr">=
<code class=3D"xref docutils literal notranslate"><span class=3D"pre">m_exp=
r</span></code></a> | <a class=3D"reference internal" href=3D"https://docs.=
python.org/3/reference/expressions.html#grammar-token-a-expr"><code class=
=3D"xref docutils literal notranslate"><span class=3D"pre">a_expr</span></c=
ode></a> "-" <a class=3D"reference internal" href=3D"https://docs.python.or=
g/3/reference/expressions.html#grammar-token-m-expr"><code class=3D"xref do=
cutils literal notranslate"><span class=3D"pre">m_expr</span></code></a>
</pre>
<p id=3D"index-64">The <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">*</span></code> (multiplication) operator yields the product o=
f its arguments.  The
arguments must either both be numbers, or one argument must be an integer a=
nd
the other must be a sequence. In the former case, the numbers are converted=
 to a
common type and then multiplied together.  In the latter case, sequence
repetition is performed; a negative repetition factor yields an empty seque=
nce.</p>
<p id=3D"index-65">The <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">@</span></code> (at) operator is intended to be used for matri=
x multiplication.  No
builtin Python types implement this operator.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">New in version 3.5.</span></p>
</div>
<p id=3D"index-66">The <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">/</span></code> (division) and <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">//</span></code> (floor division) operato=
rs yield the quotient of
their arguments.  The numeric arguments are first converted to a common typ=
e.
Division of integers yields a float, while floor division of integers resul=
ts in an
integer; the result is that of mathematical division with the =E2=80=98floo=
r=E2=80=99 function
applied to the result.  Division by zero raises the <a class=3D"reference i=
nternal" href=3D"https://docs.python.org/3/library/exceptions.html#ZeroDivi=
sionError" title=3D"ZeroDivisionError"><code class=3D"xref py py-exc docuti=
ls literal notranslate"><span class=3D"pre">ZeroDivisionError</span></code>=
</a>
exception.</p>
<p id=3D"index-67">The <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">%</span></code> (modulo) operator yields the remainder from th=
e division of the first
argument by the second.  The numeric arguments are first converted to a com=
mon
type.  A zero right argument raises the <a class=3D"reference internal" hre=
f=3D"https://docs.python.org/3/library/exceptions.html#ZeroDivisionError" t=
itle=3D"ZeroDivisionError"><code class=3D"xref py py-exc docutils literal n=
otranslate"><span class=3D"pre">ZeroDivisionError</span></code></a> excepti=
on.  The
arguments may be floating point numbers, e.g., <code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">3.14%0.7</span></code> equals <code cl=
ass=3D"docutils literal notranslate"><span class=3D"pre">0.34</span></code>
(since <code class=3D"docutils literal notranslate"><span class=3D"pre">3.1=
4</span></code> equals <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">4*0.7</span> <span class=3D"pre">+</span> <span class=3D"pre">=
0.34</span></code>.)  The modulo operator always yields a
result with the same sign as its second operand (or zero); the absolute val=
ue of
the result is strictly smaller than the absolute value of the second operan=
d
<a class=3D"footnote-reference brackets" href=3D"https://docs.python.org/3/=
reference/expressions.html#id17" id=3D"id9">1</a>.</p>
<p>The floor division and modulo operators are connected by the following
identity: <code class=3D"docutils literal notranslate"><span class=3D"pre">=
x</span> <span class=3D"pre">=3D=3D</span> <span class=3D"pre">(x//y)*y</sp=
an> <span class=3D"pre">+</span> <span class=3D"pre">(x%y)</span></code>.  =
Floor division and modulo are also
connected with the built-in function <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/functions.html#divmod" title=3D"divmo=
d"><code class=3D"xref py py-func docutils literal notranslate"><span class=
=3D"pre">divmod()</span></code></a>: <code class=3D"docutils literal notran=
slate"><span class=3D"pre">divmod(x,</span> <span class=3D"pre">y)</span> <=
span class=3D"pre">=3D=3D</span> <span class=3D"pre">(x//y,</span>
<span class=3D"pre">x%y)</span></code>. <a class=3D"footnote-reference brac=
kets" href=3D"https://docs.python.org/3/reference/expressions.html#id18" id=
=3D"id10">2</a>.</p>
<p>In addition to performing the modulo operation on numbers, the <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">%</span></code> ope=
rator is
also overloaded by string objects to perform old-style string formatting (a=
lso
known as interpolation).  The syntax for string formatting is described in =
the
Python Library Reference, section <a class=3D"reference internal" href=3D"h=
ttps://docs.python.org/3/library/stdtypes.html#old-string-formatting"><span=
 class=3D"std std-ref">printf-style String Formatting</span></a>.</p>
<p>The floor division operator, the modulo operator, and the <a class=3D"re=
ference internal" href=3D"https://docs.python.org/3/library/functions.html#=
divmod" title=3D"divmod"><code class=3D"xref py py-func docutils literal no=
translate"><span class=3D"pre">divmod()</span></code></a>
function are not defined for complex numbers.  Instead, convert to a floati=
ng
point number using the <a class=3D"reference internal" href=3D"https://docs=
.python.org/3/library/functions.html#abs" title=3D"abs"><code class=3D"xref=
 py py-func docutils literal notranslate"><span class=3D"pre">abs()</span><=
/code></a> function if appropriate.</p>
<p id=3D"index-68">The <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">+</span></code> (addition) operator yields the sum of its argu=
ments.  The arguments
must either both be numbers or both be sequences of the same type.  In the
former case, the numbers are converted to a common type and then added toge=
ther.
In the latter case, the sequences are concatenated.</p>
<p id=3D"index-69">The <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">-</span></code> (subtraction) operator yields the difference o=
f its arguments.  The
numeric arguments are first converted to a common type.</p>
</div>
<div class=3D"section" id=3D"shifting-operations">
<span id=3D"shifting"></span><h2><span class=3D"section-number">6.8. </span=
>Shifting operations<a class=3D"headerlink" href=3D"https://docs.python.org=
/3/reference/expressions.html#shifting-operations" title=3D"Permalink to th=
is headline">=C2=B6</a></h2>
<p id=3D"index-70">The shifting operations have lower priority than the ari=
thmetic operations:</p>
<pre><strong id=3D"grammar-token-shift-expr">shift_expr</strong> ::=3D  <a =
class=3D"reference internal" href=3D"https://docs.python.org/3/reference/ex=
pressions.html#grammar-token-a-expr"><code class=3D"xref docutils literal n=
otranslate"><span class=3D"pre">a_expr</span></code></a> | <a class=3D"refe=
rence internal" href=3D"https://docs.python.org/3/reference/expressions.htm=
l#grammar-token-shift-expr"><code class=3D"xref docutils literal notranslat=
e"><span class=3D"pre">shift_expr</span></code></a> ("&lt;&lt;" | "&gt;&gt;=
") <a class=3D"reference internal" href=3D"https://docs.python.org/3/refere=
nce/expressions.html#grammar-token-a-expr"><code class=3D"xref docutils lit=
eral notranslate"><span class=3D"pre">a_expr</span></code></a>
</pre>
<p>These operators accept integers as arguments.  They shift the first argu=
ment to
the left or right by the number of bits given by the second argument.</p>
<p id=3D"index-71">A right shift by <em>n</em> bits is defined as floor div=
ision by <code class=3D"docutils literal notranslate"><span class=3D"pre">p=
ow(2,n)</span></code>.  A left
shift by <em>n</em> bits is defined as multiplication with <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">pow(2,n)</span></code>.</p=
>
</div>
<div class=3D"section" id=3D"binary-bitwise-operations">
<span id=3D"bitwise"></span><h2><span class=3D"section-number">6.9. </span>=
Binary bitwise operations<a class=3D"headerlink" href=3D"https://docs.pytho=
n.org/3/reference/expressions.html#binary-bitwise-operations" title=3D"Perm=
alink to this headline">=C2=B6</a></h2>
<p id=3D"index-72">Each of the three bitwise operations has a different pri=
ority level:</p>
<pre><strong id=3D"grammar-token-and-expr">and_expr</strong> ::=3D  <a clas=
s=3D"reference internal" href=3D"https://docs.python.org/3/reference/expres=
sions.html#grammar-token-shift-expr"><code class=3D"xref docutils literal n=
otranslate"><span class=3D"pre">shift_expr</span></code></a> | <a class=3D"=
reference internal" href=3D"https://docs.python.org/3/reference/expressions=
.html#grammar-token-and-expr"><code class=3D"xref docutils literal notransl=
ate"><span class=3D"pre">and_expr</span></code></a> "&amp;" <a class=3D"ref=
erence internal" href=3D"https://docs.python.org/3/reference/expressions.ht=
ml#grammar-token-shift-expr"><code class=3D"xref docutils literal notransla=
te"><span class=3D"pre">shift_expr</span></code></a>
<strong id=3D"grammar-token-xor-expr">xor_expr</strong> ::=3D  <a class=3D"=
reference internal" href=3D"https://docs.python.org/3/reference/expressions=
.html#grammar-token-and-expr"><code class=3D"xref docutils literal notransl=
ate"><span class=3D"pre">and_expr</span></code></a> | <a class=3D"reference=
 internal" href=3D"https://docs.python.org/3/reference/expressions.html#gra=
mmar-token-xor-expr"><code class=3D"xref docutils literal notranslate"><spa=
n class=3D"pre">xor_expr</span></code></a> "^" <a class=3D"reference intern=
al" href=3D"https://docs.python.org/3/reference/expressions.html#grammar-to=
ken-and-expr"><code class=3D"xref docutils literal notranslate"><span class=
=3D"pre">and_expr</span></code></a>
<strong id=3D"grammar-token-or-expr">or_expr </strong> ::=3D  <a class=3D"r=
eference internal" href=3D"https://docs.python.org/3/reference/expressions.=
html#grammar-token-xor-expr"><code class=3D"xref docutils literal notransla=
te"><span class=3D"pre">xor_expr</span></code></a> | <a class=3D"reference =
internal" href=3D"https://docs.python.org/3/reference/expressions.html#gram=
mar-token-or-expr"><code class=3D"xref docutils literal notranslate"><span =
class=3D"pre">or_expr</span></code></a> "|" <a class=3D"reference internal"=
 href=3D"https://docs.python.org/3/reference/expressions.html#grammar-token=
-xor-expr"><code class=3D"xref docutils literal notranslate"><span class=3D=
"pre">xor_expr</span></code></a>
</pre>
<p id=3D"index-73">The <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">&amp;</span></code> operator yields the bitwise AND of its arg=
uments, which must be
integers.</p>
<p id=3D"index-74">The <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">^</span></code> operator yields the bitwise XOR (exclusive OR)=
 of its arguments, which
must be integers.</p>
<p id=3D"index-75">The <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">|</span></code> operator yields the bitwise (inclusive) OR of =
its arguments, which
must be integers.</p>
</div>
<div class=3D"section" id=3D"comparisons">
<span id=3D"id11"></span><h2><span class=3D"section-number">6.10. </span>Co=
mparisons<a class=3D"headerlink" href=3D"https://docs.python.org/3/referenc=
e/expressions.html#comparisons" title=3D"Permalink to this headline">=C2=B6=
</a></h2>
<p id=3D"index-76">Unlike C, all comparison operations in Python have the s=
ame priority, which is
lower than that of any arithmetic, shifting or bitwise operation.  Also unl=
ike
C, expressions like <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">a</span> <span class=3D"pre">&lt;</span> <span class=3D"pre">b</s=
pan> <span class=3D"pre">&lt;</span> <span class=3D"pre">c</span></code> ha=
ve the interpretation that is conventional
in mathematics:</p>
<pre><strong id=3D"grammar-token-comparison">comparison   </strong> ::=3D  =
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#grammar-token-or-expr"><code class=3D"xref docutils liter=
al notranslate"><span class=3D"pre">or_expr</span></code></a> (<a class=3D"=
reference internal" href=3D"https://docs.python.org/3/reference/expressions=
.html#grammar-token-comp-operator"><code class=3D"xref docutils literal not=
ranslate"><span class=3D"pre">comp_operator</span></code></a> <a class=3D"r=
eference internal" href=3D"https://docs.python.org/3/reference/expressions.=
html#grammar-token-or-expr"><code class=3D"xref docutils literal notranslat=
e"><span class=3D"pre">or_expr</span></code></a>)*
<strong id=3D"grammar-token-comp-operator">comp_operator</strong> ::=3D  "&=
lt;" | "&gt;" | "=3D=3D" | "&gt;=3D" | "&lt;=3D" | "!=3D"
                   | "is" ["not"] | ["not"] "in"
</pre>
<p>Comparisons yield boolean values: <code class=3D"docutils literal notran=
slate"><span class=3D"pre">True</span></code> or <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">False</span></code>.</p>
<p id=3D"index-77">Comparisons can be chained arbitrarily, e.g., <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">x</span> <span class=
=3D"pre">&lt;</span> <span class=3D"pre">y</span> <span class=3D"pre">&lt;=
=3D</span> <span class=3D"pre">z</span></code> is equivalent to
<code class=3D"docutils literal notranslate"><span class=3D"pre">x</span> <=
span class=3D"pre">&lt;</span> <span class=3D"pre">y</span> <span class=3D"=
pre">and</span> <span class=3D"pre">y</span> <span class=3D"pre">&lt;=3D</s=
pan> <span class=3D"pre">z</span></code>, except that <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">y</span></code> is evaluated on=
ly once (but in both
cases <code class=3D"docutils literal notranslate"><span class=3D"pre">z</s=
pan></code> is not evaluated at all when <code class=3D"docutils literal no=
translate"><span class=3D"pre">x</span> <span class=3D"pre">&lt;</span> <sp=
an class=3D"pre">y</span></code> is found to be false).</p>
<p>Formally, if <em>a</em>, <em>b</em>, <em>c</em>, =E2=80=A6, <em>y</em>, =
<em>z</em> are expressions and <em>op1</em>, <em>op2</em>, =E2=80=A6,
<em>opN</em> are comparison operators, then <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">a</span> <span class=3D"pre">op1</span> <=
span class=3D"pre">b</span> <span class=3D"pre">op2</span> <span class=3D"p=
re">c</span> <span class=3D"pre">...</span> <span class=3D"pre">y</span> <s=
pan class=3D"pre">opN</span> <span class=3D"pre">z</span></code> is equival=
ent
to <code class=3D"docutils literal notranslate"><span class=3D"pre">a</span=
> <span class=3D"pre">op1</span> <span class=3D"pre">b</span> <span class=
=3D"pre">and</span> <span class=3D"pre">b</span> <span class=3D"pre">op2</s=
pan> <span class=3D"pre">c</span> <span class=3D"pre">and</span> <span clas=
s=3D"pre">...</span> <span class=3D"pre">y</span> <span class=3D"pre">opN</=
span> <span class=3D"pre">z</span></code>, except that each expression is
evaluated at most once.</p>
<p>Note that <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">a</span> <span class=3D"pre">op1</span> <span class=3D"pre">b</span> <sp=
an class=3D"pre">op2</span> <span class=3D"pre">c</span></code> doesn=E2=80=
=99t imply any kind of comparison between <em>a</em> and
<em>c</em>, so that, e.g., <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">x</span> <span class=3D"pre">&lt;</span> <span class=3D"pr=
e">y</span> <span class=3D"pre">&gt;</span> <span class=3D"pre">z</span></c=
ode> is perfectly legal (though perhaps not
pretty).</p>
<div class=3D"section" id=3D"value-comparisons">
<h3><span class=3D"section-number">6.10.1. </span>Value comparisons<a class=
=3D"headerlink" href=3D"https://docs.python.org/3/reference/expressions.htm=
l#value-comparisons" title=3D"Permalink to this headline">=C2=B6</a></h3>
<p>The operators <code class=3D"docutils literal notranslate"><span class=
=3D"pre">&lt;</span></code>, <code class=3D"docutils literal notranslate"><=
span class=3D"pre">&gt;</span></code>, <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">=3D=3D</span></code>, <code class=3D"docutils =
literal notranslate"><span class=3D"pre">&gt;=3D</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">&lt;=3D</span></code>=
, and <code class=3D"docutils literal notranslate"><span class=3D"pre">!=3D=
</span></code> compare the
values of two objects.  The objects do not need to have the same type.</p>
<p>Chapter <a class=3D"reference internal" href=3D"https://docs.python.org/=
3/reference/datamodel.html#objects"><span class=3D"std std-ref">Objects, va=
lues and types</span></a> states that objects have a value (in addition to =
type
and identity).  The value of an object is a rather abstract notion in Pytho=
n:
For example, there is no canonical access method for an object=E2=80=99s va=
lue.  Also,
there is no requirement that the value of an object should be constructed i=
n a
particular way, e.g. comprised of all its data attributes. Comparison opera=
tors
implement a particular notion of what the value of an object is.  One can t=
hink
of them as defining the value of an object indirectly, by means of their
comparison implementation.</p>
<p>Because all types are (direct or indirect) subtypes of <a class=3D"refer=
ence internal" href=3D"https://docs.python.org/3/library/functions.html#obj=
ect" title=3D"object"><code class=3D"xref py py-class docutils literal notr=
anslate"><span class=3D"pre">object</span></code></a>, they
inherit the default comparison behavior from <a class=3D"reference internal=
" href=3D"https://docs.python.org/3/library/functions.html#object" title=3D=
"object"><code class=3D"xref py py-class docutils literal notranslate"><spa=
n class=3D"pre">object</span></code></a>.  Types can
customize their comparison behavior by implementing
<em class=3D"dfn">rich comparison methods</em> like <a class=3D"reference i=
nternal" href=3D"https://docs.python.org/3/reference/datamodel.html#object.=
__lt__" title=3D"object.__lt__"><code class=3D"xref py py-meth docutils lit=
eral notranslate"><span class=3D"pre">__lt__()</span></code></a>, described=
 in
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/datamodel.html#customization"><span class=3D"std std-ref">Basic customizat=
ion</span></a>.</p>
<p>The default behavior for equality comparison (<code class=3D"docutils li=
teral notranslate"><span class=3D"pre">=3D=3D</span></code> and <code class=
=3D"docutils literal notranslate"><span class=3D"pre">!=3D</span></code>) i=
s based on
the identity of the objects.  Hence, equality comparison of instances with =
the
same identity results in equality, and equality comparison of instances wit=
h
different identities results in inequality.  A motivation for this default
behavior is the desire that all objects should be reflexive (i.e. <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">x</span> <span clas=
s=3D"pre">is</span> <span class=3D"pre">y</span></code>
implies <code class=3D"docutils literal notranslate"><span class=3D"pre">x<=
/span> <span class=3D"pre">=3D=3D</span> <span class=3D"pre">y</span></code=
>).</p>
<p>A default order comparison (<code class=3D"docutils literal notranslate"=
><span class=3D"pre">&lt;</span></code>, <code class=3D"docutils literal no=
translate"><span class=3D"pre">&gt;</span></code>, <code class=3D"docutils =
literal notranslate"><span class=3D"pre">&lt;=3D</span></code>, and <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">&gt;=3D</span></c=
ode>) is not provided;
an attempt raises <a class=3D"reference internal" href=3D"https://docs.pyth=
on.org/3/library/exceptions.html#TypeError" title=3D"TypeError"><code class=
=3D"xref py py-exc docutils literal notranslate"><span class=3D"pre">TypeEr=
ror</span></code></a>.  A motivation for this default behavior is
the lack of a similar invariant as for equality.</p>
<p>The behavior of the default equality comparison, that instances with dif=
ferent
identities are always unequal, may be in contrast to what types will need t=
hat
have a sensible definition of object value and value-based equality.  Such
types will need to customize their comparison behavior, and in fact, a numb=
er
of built-in types have done that.</p>
<p>The following list describes the comparison behavior of the most importa=
nt
built-in types.</p>
<ul>
<li><p>Numbers of built-in numeric types (<a class=3D"reference internal" h=
ref=3D"https://docs.python.org/3/library/stdtypes.html#typesnumeric"><span =
class=3D"std std-ref">Numeric Types =E2=80=94 int, float, complex</span></a=
>) and of the standard
library types <a class=3D"reference internal" href=3D"https://docs.python.o=
rg/3/library/fractions.html#fractions.Fraction" title=3D"fractions.Fraction=
"><code class=3D"xref py py-class docutils literal notranslate"><span class=
=3D"pre">fractions.Fraction</span></code></a> and <a class=3D"reference int=
ernal" href=3D"https://docs.python.org/3/library/decimal.html#decimal.Decim=
al" title=3D"decimal.Decimal"><code class=3D"xref py py-class docutils lite=
ral notranslate"><span class=3D"pre">decimal.Decimal</span></code></a> can =
be
compared within and across their types, with the restriction that complex
numbers do not support order comparison.  Within the limits of the types
involved, they compare mathematically (algorithmically) correct without los=
s
of precision.</p>
<p>The not-a-number values <code class=3D"docutils literal notranslate"><sp=
an class=3D"pre">float('NaN')</span></code> and <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">decimal.Decimal('NaN')</span></code> =
are
special.  Any ordered comparison of a number to a not-a-number value is fal=
se.
A counter-intuitive implication is that not-a-number values are not equal t=
o
themselves.  For example, if <code class=3D"docutils literal notranslate"><=
span class=3D"pre">x</span> <span class=3D"pre">=3D</span> <span class=3D"p=
re">float('NaN')</span></code>, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">3</span> <span class=3D"pre">&lt;</span> <span class=
=3D"pre">x</span></code>, <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">x</span> <span class=3D"pre">&lt;</span> <span class=3D"pre=
">3</span></code>, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">x</span>
<span class=3D"pre">=3D=3D</span> <span class=3D"pre">x</span></code>, <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">x</span> <span=
 class=3D"pre">!=3D</span> <span class=3D"pre">x</span></code> are all fals=
e.  This behavior is compliant with IEEE 754.</p>
</li>
<li><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Non=
e</span></code> and <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">NotImplemented</span></code> are singletons.  <span class=3D"targ=
et" id=3D"index-78"></span><a class=3D"pep reference external" href=3D"http=
s://www.python.org/dev/peps/pep-0008"><strong>PEP 8</strong></a> advises th=
at
comparisons for singletons should always be done with <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">is</span></code> or <code class=
=3D"docutils literal notranslate"><span class=3D"pre">is</span> <span class=
=3D"pre">not</span></code>,
never the equality operators.</p></li>
<li><p>Binary sequences (instances of <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/library/stdtypes.html#bytes" title=3D"bytes">=
<code class=3D"xref py py-class docutils literal notranslate"><span class=
=3D"pre">bytes</span></code></a> or <a class=3D"reference internal" href=3D=
"https://docs.python.org/3/library/stdtypes.html#bytearray" title=3D"bytear=
ray"><code class=3D"xref py py-class docutils literal notranslate"><span cl=
ass=3D"pre">bytearray</span></code></a>) can be
compared within and across their types.  They compare lexicographically usi=
ng
the numeric values of their elements.</p></li>
<li><p>Strings (instances of <a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/library/stdtypes.html#str" title=3D"str"><code class=3D=
"xref py py-class docutils literal notranslate"><span class=3D"pre">str</sp=
an></code></a>) compare lexicographically using the
numerical Unicode code points (the result of the built-in function
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/f=
unctions.html#ord" title=3D"ord"><code class=3D"xref py py-func docutils li=
teral notranslate"><span class=3D"pre">ord()</span></code></a>) of their ch=
aracters. <a class=3D"footnote-reference brackets" href=3D"https://docs.pyt=
hon.org/3/reference/expressions.html#id19" id=3D"id12">3</a></p>
<p>Strings and binary sequences cannot be directly compared.</p>
</li>
<li><p>Sequences (instances of <a class=3D"reference internal" href=3D"http=
s://docs.python.org/3/library/stdtypes.html#tuple" title=3D"tuple"><code cl=
ass=3D"xref py py-class docutils literal notranslate"><span class=3D"pre">t=
uple</span></code></a>, <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/library/stdtypes.html#list" title=3D"list"><code class=3D"xr=
ef py py-class docutils literal notranslate"><span class=3D"pre">list</span=
></code></a>, or <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3/library/stdtypes.html#range" title=3D"range"><code class=3D"xref py=
 py-class docutils literal notranslate"><span class=3D"pre">range</span></c=
ode></a>) can
be compared only within each of their types, with the restriction that rang=
es
do not support order comparison.  Equality comparison across these types
results in inequality, and ordering comparison across these types raises
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/e=
xceptions.html#TypeError" title=3D"TypeError"><code class=3D"xref py py-exc=
 docutils literal notranslate"><span class=3D"pre">TypeError</span></code><=
/a>.</p>
<p>Sequences compare lexicographically using comparison of corresponding
elements.  The built-in containers typically assume identical objects are
equal to themselves.  That lets them bypass equality tests for identical
objects to improve performance and to maintain their internal invariants.</=
p>
<p>Lexicographical comparison between built-in collections works as follows=
:</p>
<ul class=3D"simple">
<li><p>For two collections to compare equal, they must be of the same type,=
 have
the same length, and each pair of corresponding elements must compare
equal (for example, <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">[1,2]</span> <span class=3D"pre">=3D=3D</span> <span class=3D"pre=
">(1,2)</span></code> is false because the type is not the
same).</p></li>
<li><p>Collections that support order comparison are ordered the same as th=
eir
first unequal elements (for example, <code class=3D"docutils literal notran=
slate"><span class=3D"pre">[1,2,x]</span> <span class=3D"pre">&lt;=3D</span=
> <span class=3D"pre">[1,2,y]</span></code> has the same
value as <code class=3D"docutils literal notranslate"><span class=3D"pre">x=
</span> <span class=3D"pre">&lt;=3D</span> <span class=3D"pre">y</span></co=
de>).  If a corresponding element does not exist, the
shorter collection is ordered first (for example, <code class=3D"docutils l=
iteral notranslate"><span class=3D"pre">[1,2]</span> <span class=3D"pre">&l=
t;</span> <span class=3D"pre">[1,2,3]</span></code> is
true).</p></li>
</ul>
</li>
<li><p>Mappings (instances of <a class=3D"reference internal" href=3D"https=
://docs.python.org/3/library/stdtypes.html#dict" title=3D"dict"><code class=
=3D"xref py py-class docutils literal notranslate"><span class=3D"pre">dict=
</span></code></a>) compare equal if and only if they have
equal <cite>(key, value)</cite> pairs. Equality comparison of the keys and =
values
enforces reflexivity.</p>
<p>Order comparisons (<code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">&lt;</span></code>, <code class=3D"docutils literal notranslate=
"><span class=3D"pre">&gt;</span></code>, <code class=3D"docutils literal n=
otranslate"><span class=3D"pre">&lt;=3D</span></code>, and <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">&gt;=3D</span></code>) rai=
se <a class=3D"reference internal" href=3D"https://docs.python.org/3/librar=
y/exceptions.html#TypeError" title=3D"TypeError"><code class=3D"xref py py-=
exc docutils literal notranslate"><span class=3D"pre">TypeError</span></cod=
e></a>.</p>
</li>
<li><p>Sets (instances of <a class=3D"reference internal" href=3D"https://d=
ocs.python.org/3/library/stdtypes.html#set" title=3D"set"><code class=3D"xr=
ef py py-class docutils literal notranslate"><span class=3D"pre">set</span>=
</code></a> or <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/library/stdtypes.html#frozenset" title=3D"frozenset"><code class=3D"x=
ref py py-class docutils literal notranslate"><span class=3D"pre">frozenset=
</span></code></a>) can be compared within
and across their types.</p>
<p>They define order
comparison operators to mean subset and superset tests.  Those relations do
not define total orderings (for example, the two sets <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">{1,2}</span></code> and <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">{2,3}</span></cod=
e>
are not equal, nor subsets of one another, nor supersets of one
another).  Accordingly, sets are not appropriate arguments for functions
which depend on total ordering (for example, <a class=3D"reference internal=
" href=3D"https://docs.python.org/3/library/functions.html#min" title=3D"mi=
n"><code class=3D"xref py py-func docutils literal notranslate"><span class=
=3D"pre">min()</span></code></a>, <a class=3D"reference internal" href=3D"h=
ttps://docs.python.org/3/library/functions.html#max" title=3D"max"><code cl=
ass=3D"xref py py-func docutils literal notranslate"><span class=3D"pre">ma=
x()</span></code></a>, and
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/f=
unctions.html#sorted" title=3D"sorted"><code class=3D"xref py py-func docut=
ils literal notranslate"><span class=3D"pre">sorted()</span></code></a> pro=
duce undefined results given a list of sets as inputs).</p>
<p>Comparison of sets enforces reflexivity of its elements.</p>
</li>
<li><p>Most other built-in types have no comparison methods implemented, so=
 they
inherit the default comparison behavior.</p></li>
</ul>
<p>User-defined classes that customize their comparison behavior should fol=
low
some consistency rules, if possible:</p>
<ul>
<li><p>Equality comparison should be reflexive.
In other words, identical objects should compare equal:</p>
<blockquote>
<div><p><code class=3D"docutils literal notranslate"><span class=3D"pre">x<=
/span> <span class=3D"pre">is</span> <span class=3D"pre">y</span></code> im=
plies <code class=3D"docutils literal notranslate"><span class=3D"pre">x</s=
pan> <span class=3D"pre">=3D=3D</span> <span class=3D"pre">y</span></code><=
/p>
</div></blockquote>
</li>
<li><p>Comparison should be symmetric.
In other words, the following expressions should have the same result:</p>
<blockquote>
<div><p><code class=3D"docutils literal notranslate"><span class=3D"pre">x<=
/span> <span class=3D"pre">=3D=3D</span> <span class=3D"pre">y</span></code=
> and <code class=3D"docutils literal notranslate"><span class=3D"pre">y</s=
pan> <span class=3D"pre">=3D=3D</span> <span class=3D"pre">x</span></code><=
/p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">x</span=
> <span class=3D"pre">!=3D</span> <span class=3D"pre">y</span></code> and <=
code class=3D"docutils literal notranslate"><span class=3D"pre">y</span> <s=
pan class=3D"pre">!=3D</span> <span class=3D"pre">x</span></code></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">x</span=
> <span class=3D"pre">&lt;</span> <span class=3D"pre">y</span></code> and <=
code class=3D"docutils literal notranslate"><span class=3D"pre">y</span> <s=
pan class=3D"pre">&gt;</span> <span class=3D"pre">x</span></code></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">x</span=
> <span class=3D"pre">&lt;=3D</span> <span class=3D"pre">y</span></code> an=
d <code class=3D"docutils literal notranslate"><span class=3D"pre">y</span>=
 <span class=3D"pre">&gt;=3D</span> <span class=3D"pre">x</span></code></p>
</div></blockquote>
</li>
<li><p>Comparison should be transitive.
The following (non-exhaustive) examples illustrate that:</p>
<blockquote>
<div><p><code class=3D"docutils literal notranslate"><span class=3D"pre">x<=
/span> <span class=3D"pre">&gt;</span> <span class=3D"pre">y</span> <span c=
lass=3D"pre">and</span> <span class=3D"pre">y</span> <span class=3D"pre">&g=
t;</span> <span class=3D"pre">z</span></code> implies <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">x</span> <span class=3D"pre">&g=
t;</span> <span class=3D"pre">z</span></code></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">x</span=
> <span class=3D"pre">&lt;</span> <span class=3D"pre">y</span> <span class=
=3D"pre">and</span> <span class=3D"pre">y</span> <span class=3D"pre">&lt;=
=3D</span> <span class=3D"pre">z</span></code> implies <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">x</span> <span class=3D"pre">&=
lt;</span> <span class=3D"pre">z</span></code></p>
</div></blockquote>
</li>
<li><p>Inverse comparison should result in the boolean negation.
In other words, the following expressions should have the same result:</p>
<blockquote>
<div><p><code class=3D"docutils literal notranslate"><span class=3D"pre">x<=
/span> <span class=3D"pre">=3D=3D</span> <span class=3D"pre">y</span></code=
> and <code class=3D"docutils literal notranslate"><span class=3D"pre">not<=
/span> <span class=3D"pre">x</span> <span class=3D"pre">!=3D</span> <span c=
lass=3D"pre">y</span></code></p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">x</span=
> <span class=3D"pre">&lt;</span> <span class=3D"pre">y</span></code> and <=
code class=3D"docutils literal notranslate"><span class=3D"pre">not</span> =
<span class=3D"pre">x</span> <span class=3D"pre">&gt;=3D</span> <span class=
=3D"pre">y</span></code> (for total ordering)</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">x</span=
> <span class=3D"pre">&gt;</span> <span class=3D"pre">y</span></code> and <=
code class=3D"docutils literal notranslate"><span class=3D"pre">not</span> =
<span class=3D"pre">x</span> <span class=3D"pre">&lt;=3D</span> <span class=
=3D"pre">y</span></code> (for total ordering)</p>
</div></blockquote>
<p>The last two expressions apply to totally ordered collections (e.g. to
sequences, but not to sets or mappings). See also the
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/f=
unctools.html#functools.total_ordering" title=3D"functools.total_ordering">=
<code class=3D"xref py py-func docutils literal notranslate"><span class=3D=
"pre">total_ordering()</span></code></a> decorator.</p>
</li>
<li><p>The <a class=3D"reference internal" href=3D"https://docs.python.org/=
3/library/functions.html#hash" title=3D"hash"><code class=3D"xref py py-fun=
c docutils literal notranslate"><span class=3D"pre">hash()</span></code></a=
> result should be consistent with equality.
Objects that are equal should either have the same hash value,
or be marked as unhashable.</p></li>
</ul>
<p>Python does not enforce these consistency rules. In fact, the not-a-numb=
er
values are an example for not following these rules.</p>
</div>
<div class=3D"section" id=3D"membership-test-operations">
<span id=3D"membership-test-details"></span><span id=3D"not-in"></span><spa=
n id=3D"in"></span><h3><span class=3D"section-number">6.10.2. </span>Member=
ship test operations<a class=3D"headerlink" href=3D"https://docs.python.org=
/3/reference/expressions.html#membership-test-operations" title=3D"Permalin=
k to this headline">=C2=B6</a></h3>
<p>The operators <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3/reference/expressions.html#in"><code class=3D"xref std std-keyword =
docutils literal notranslate"><span class=3D"pre">in</span></code></a> and =
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#not-in"><code class=3D"xref std std-keyword docutils lite=
ral notranslate"><span class=3D"pre">not</span> <span class=3D"pre">in</spa=
n></code></a> test for membership.  <code class=3D"docutils literal notrans=
late"><span class=3D"pre">x</span> <span class=3D"pre">in</span>
<span class=3D"pre">s</span></code> evaluates to <code class=3D"docutils li=
teral notranslate"><span class=3D"pre">True</span></code> if <em>x</em> is =
a member of <em>s</em>, and <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">False</span></code> otherwise.
<code class=3D"docutils literal notranslate"><span class=3D"pre">x</span> <=
span class=3D"pre">not</span> <span class=3D"pre">in</span> <span class=3D"=
pre">s</span></code> returns the negation of <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">x</span> <span class=3D"pre">in</span> <=
span class=3D"pre">s</span></code>.  All built-in sequences and
set types support this as well as dictionary, for which <code class=3D"xref=
 std std-keyword docutils literal notranslate"><span class=3D"pre">in</span=
></code> tests
whether the dictionary has a given key. For container types such as list, t=
uple,
set, frozenset, dict, or collections.deque, the expression <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">x</span> <span class=3D"pr=
e">in</span> <span class=3D"pre">y</span></code> is equivalent
to <code class=3D"docutils literal notranslate"><span class=3D"pre">any(x</=
span> <span class=3D"pre">is</span> <span class=3D"pre">e</span> <span clas=
s=3D"pre">or</span> <span class=3D"pre">x</span> <span class=3D"pre">=3D=3D=
</span> <span class=3D"pre">e</span> <span class=3D"pre">for</span> <span c=
lass=3D"pre">e</span> <span class=3D"pre">in</span> <span class=3D"pre">y)<=
/span></code>.</p>
<p>For the string and bytes types, <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">x</span> <span class=3D"pre">in</span> <span class=
=3D"pre">y</span></code> is <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">True</span></code> if and only if <em>x</em> is a
substring of <em>y</em>.  An equivalent test is <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">y.find(x)</span> <span class=3D"pre">=
!=3D</span> <span class=3D"pre">-1</span></code>.  Empty strings are
always considered to be a substring of any other string, so <code class=3D"=
docutils literal notranslate"><span class=3D"pre">""</span> <span class=3D"=
pre">in</span> <span class=3D"pre">"abc"</span></code> will
return <code class=3D"docutils literal notranslate"><span class=3D"pre">Tru=
e</span></code>.</p>
<p>For user-defined classes which define the <a class=3D"reference internal=
" href=3D"https://docs.python.org/3/reference/datamodel.html#object.__conta=
ins__" title=3D"object.__contains__"><code class=3D"xref py py-meth docutil=
s literal notranslate"><span class=3D"pre">__contains__()</span></code></a>=
 method, <code class=3D"docutils literal notranslate"><span class=3D"pre">x=
</span> <span class=3D"pre">in</span>
<span class=3D"pre">y</span></code> returns <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">True</span></code> if <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">y.__contains__(x)</span></cod=
e> returns a true value, and
<code class=3D"docutils literal notranslate"><span class=3D"pre">False</spa=
n></code> otherwise.</p>
<p>For user-defined classes which do not define <a class=3D"reference inter=
nal" href=3D"https://docs.python.org/3/reference/datamodel.html#object.__co=
ntains__" title=3D"object.__contains__"><code class=3D"xref py py-meth docu=
tils literal notranslate"><span class=3D"pre">__contains__()</span></code><=
/a> but do define
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/datamodel.html#object.__iter__" title=3D"object.__iter__"><code class=3D"x=
ref py py-meth docutils literal notranslate"><span class=3D"pre">__iter__()=
</span></code></a>, <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">x</span> <span class=3D"pre">in</span> <span class=3D"pre">y</spa=
n></code> is <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">True</span></code> if some value <code class=3D"docutils literal notrans=
late"><span class=3D"pre">z</span></code>, for which the
expression <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>x</span> <span class=3D"pre">is</span> <span class=3D"pre">z</span> <span =
class=3D"pre">or</span> <span class=3D"pre">x</span> <span class=3D"pre">=
=3D=3D</span> <span class=3D"pre">z</span></code> is true, is produced whil=
e iterating over <code class=3D"docutils literal notranslate"><span class=
=3D"pre">y</span></code>.
If an exception is raised during the iteration, it is as if <a class=3D"ref=
erence internal" href=3D"https://docs.python.org/3/reference/expressions.ht=
ml#in"><code class=3D"xref std std-keyword docutils literal notranslate"><s=
pan class=3D"pre">in</span></code></a> raised
that exception.</p>
<p>Lastly, the old-style iteration protocol is tried: if a class defines
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/datamodel.html#object.__getitem__" title=3D"object.__getitem__"><code clas=
s=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre">__ge=
titem__()</span></code></a>, <code class=3D"docutils literal notranslate"><=
span class=3D"pre">x</span> <span class=3D"pre">in</span> <span class=3D"pr=
e">y</span></code> is <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">True</span></code> if and only if there is a non-negative
integer index <em>i</em> such that <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">x</span> <span class=3D"pre">is</span> <span class=
=3D"pre">y[i]</span> <span class=3D"pre">or</span> <span class=3D"pre">x</s=
pan> <span class=3D"pre">=3D=3D</span> <span class=3D"pre">y[i]</span></cod=
e>, and no lower integer index
raises the <a class=3D"reference internal" href=3D"https://docs.python.org/=
3/library/exceptions.html#IndexError" title=3D"IndexError"><code class=3D"x=
ref py py-exc docutils literal notranslate"><span class=3D"pre">IndexError<=
/span></code></a> exception.  (If any other exception is raised, it is as
if <a class=3D"reference internal" href=3D"https://docs.python.org/3/refere=
nce/expressions.html#in"><code class=3D"xref std std-keyword docutils liter=
al notranslate"><span class=3D"pre">in</span></code></a> raised that except=
ion).</p>
<p id=3D"index-79">The operator <a class=3D"reference internal" href=3D"htt=
ps://docs.python.org/3/reference/expressions.html#not-in"><code class=3D"xr=
ef std std-keyword docutils literal notranslate"><span class=3D"pre">not</s=
pan> <span class=3D"pre">in</span></code></a> is defined to have the invers=
e truth value of
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#in"><code class=3D"xref std std-keyword docutils literal =
notranslate"><span class=3D"pre">in</span></code></a>.</p>
</div>
<div class=3D"section" id=3D"is-not">
<span id=3D"is"></span><span id=3D"index-80"></span><span id=3D"identity-co=
mparisons"></span><h3><span class=3D"section-number">6.10.3. </span>Identit=
y comparisons<a class=3D"headerlink" href=3D"https://docs.python.org/3/refe=
rence/expressions.html#is-not" title=3D"Permalink to this headline">=C2=B6<=
/a></h3>
<p>The operators <a class=3D"reference internal" href=3D"https://docs.pytho=
n.org/3/reference/expressions.html#is"><code class=3D"xref std std-keyword =
docutils literal notranslate"><span class=3D"pre">is</span></code></a> and =
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#is-not"><code class=3D"xref std std-keyword docutils lite=
ral notranslate"><span class=3D"pre">is</span> <span class=3D"pre">not</spa=
n></code></a> test for an object=E2=80=99s identity: <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">x</span>
<span class=3D"pre">is</span> <span class=3D"pre">y</span></code> is true i=
f and only if <em>x</em> and <em>y</em> are the same object.  An Object=E2=
=80=99s identity
is determined using the <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/library/functions.html#id" title=3D"id"><code class=3D"xref =
py py-meth docutils literal notranslate"><span class=3D"pre">id()</span></c=
ode></a> function.  <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">x</span> <span class=3D"pre">is</span> <span class=3D"pre">not</s=
pan> <span class=3D"pre">y</span></code> yields the inverse
truth value. <a class=3D"footnote-reference brackets" href=3D"https://docs.=
python.org/3/reference/expressions.html#id20" id=3D"id13">4</a></p>
</div>
</div>
<div class=3D"section" id=3D"boolean-operations">
<span id=3D"not"></span><span id=3D"or"></span><span id=3D"and"></span><spa=
n id=3D"booleans"></span><h2><span class=3D"section-number">6.11. </span>Bo=
olean operations<a class=3D"headerlink" href=3D"https://docs.python.org/3/r=
eference/expressions.html#boolean-operations" title=3D"Permalink to this he=
adline">=C2=B6</a></h2>
<pre id=3D"index-81"><strong id=3D"grammar-token-or-test">or_test </strong>=
 ::=3D  <a class=3D"reference internal" href=3D"https://docs.python.org/3/r=
eference/expressions.html#grammar-token-and-test"><code class=3D"xref docut=
ils literal notranslate"><span class=3D"pre">and_test</span></code></a> | <=
a class=3D"reference internal" href=3D"https://docs.python.org/3/reference/=
expressions.html#grammar-token-or-test"><code class=3D"xref docutils litera=
l notranslate"><span class=3D"pre">or_test</span></code></a> "or" <a class=
=3D"reference internal" href=3D"https://docs.python.org/3/reference/express=
ions.html#grammar-token-and-test"><code class=3D"xref docutils literal notr=
anslate"><span class=3D"pre">and_test</span></code></a>
<strong id=3D"grammar-token-and-test">and_test</strong> ::=3D  <a class=3D"=
reference internal" href=3D"https://docs.python.org/3/reference/expressions=
.html#grammar-token-not-test"><code class=3D"xref docutils literal notransl=
ate"><span class=3D"pre">not_test</span></code></a> | <a class=3D"reference=
 internal" href=3D"https://docs.python.org/3/reference/expressions.html#gra=
mmar-token-and-test"><code class=3D"xref docutils literal notranslate"><spa=
n class=3D"pre">and_test</span></code></a> "and" <a class=3D"reference inte=
rnal" href=3D"https://docs.python.org/3/reference/expressions.html#grammar-=
token-not-test"><code class=3D"xref docutils literal notranslate"><span cla=
ss=3D"pre">not_test</span></code></a>
<strong id=3D"grammar-token-not-test">not_test</strong> ::=3D  <a class=3D"=
reference internal" href=3D"https://docs.python.org/3/reference/expressions=
.html#grammar-token-comparison"><code class=3D"xref docutils literal notran=
slate"><span class=3D"pre">comparison</span></code></a> | "not" <a class=3D=
"reference internal" href=3D"https://docs.python.org/3/reference/expression=
s.html#grammar-token-not-test"><code class=3D"xref docutils literal notrans=
late"><span class=3D"pre">not_test</span></code></a>
</pre>
<p>In the context of Boolean operations, and also when expressions are used=
 by
control flow statements, the following values are interpreted as false:
<code class=3D"docutils literal notranslate"><span class=3D"pre">False</spa=
n></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>None</span></code>, numeric zero of all types, and empty strings and conta=
iners
(including strings, tuples, lists, dictionaries, sets and frozensets).  All
other values are interpreted as true.  User-defined objects can customize t=
heir
truth value by providing a <a class=3D"reference internal" href=3D"https://=
docs.python.org/3/reference/datamodel.html#object.__bool__" title=3D"object=
.__bool__"><code class=3D"xref py py-meth docutils literal notranslate"><sp=
an class=3D"pre">__bool__()</span></code></a> method.</p>
<p id=3D"index-82">The operator <a class=3D"reference internal" href=3D"htt=
ps://docs.python.org/3/reference/expressions.html#not"><code class=3D"xref =
std std-keyword docutils literal notranslate"><span class=3D"pre">not</span=
></code></a> yields <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">True</span></code> if its argument is false, <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">False</span></code>
otherwise.</p>
<p id=3D"index-83">The expression <code class=3D"docutils literal notransla=
te"><span class=3D"pre">x</span> <span class=3D"pre">and</span> <span class=
=3D"pre">y</span></code> first evaluates <em>x</em>; if <em>x</em> is false=
, its value is
returned; otherwise, <em>y</em> is evaluated and the resulting value is ret=
urned.</p>
<p id=3D"index-84">The expression <code class=3D"docutils literal notransla=
te"><span class=3D"pre">x</span> <span class=3D"pre">or</span> <span class=
=3D"pre">y</span></code> first evaluates <em>x</em>; if <em>x</em> is true,=
 its value is
returned; otherwise, <em>y</em> is evaluated and the resulting value is ret=
urned.</p>
<p>Note that neither <a class=3D"reference internal" href=3D"https://docs.p=
ython.org/3/reference/expressions.html#and"><code class=3D"xref std std-key=
word docutils literal notranslate"><span class=3D"pre">and</span></code></a=
> nor <a class=3D"reference internal" href=3D"https://docs.python.org/3/ref=
erence/expressions.html#or"><code class=3D"xref std std-keyword docutils li=
teral notranslate"><span class=3D"pre">or</span></code></a> restrict the va=
lue and type
they return to <code class=3D"docutils literal notranslate"><span class=3D"=
pre">False</span></code> and <code class=3D"docutils literal notranslate"><=
span class=3D"pre">True</span></code>, but rather return the last evaluated
argument.  This is sometimes useful, e.g., if <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">s</span></code> is a string that should=
 be
replaced by a default value if it is empty, the expression <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">s</span> <span class=3D"pr=
e">or</span> <span class=3D"pre">'foo'</span></code> yields
the desired value.  Because <a class=3D"reference internal" href=3D"https:/=
/docs.python.org/3/reference/expressions.html#not"><code class=3D"xref std =
std-keyword docutils literal notranslate"><span class=3D"pre">not</span></c=
ode></a> has to create a new value, it
returns a boolean value regardless of the type of its argument
(for example, <code class=3D"docutils literal notranslate"><span class=3D"p=
re">not</span> <span class=3D"pre">'foo'</span></code> produces <code class=
=3D"docutils literal notranslate"><span class=3D"pre">False</span></code> r=
ather than <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>''</span></code>.)</p>
</div>
<div class=3D"section" id=3D"conditional-expressions">
<span id=3D"if-expr"></span><h2><span class=3D"section-number">6.12. </span=
>Conditional expressions<a class=3D"headerlink" href=3D"https://docs.python=
.org/3/reference/expressions.html#conditional-expressions" title=3D"Permali=
nk to this headline">=C2=B6</a></h2>
<pre id=3D"index-85"><strong id=3D"grammar-token-conditional-expression">co=
nditional_expression</strong> ::=3D  <a class=3D"reference internal" href=
=3D"https://docs.python.org/3/reference/expressions.html#grammar-token-or-t=
est"><code class=3D"xref docutils literal notranslate"><span class=3D"pre">=
or_test</span></code></a> ["if" <a class=3D"reference internal" href=3D"htt=
ps://docs.python.org/3/reference/expressions.html#grammar-token-or-test"><c=
ode class=3D"xref docutils literal notranslate"><span class=3D"pre">or_test=
</span></code></a> "else" <a class=3D"reference internal" href=3D"https://d=
ocs.python.org/3/reference/expressions.html#grammar-token-expression"><code=
 class=3D"xref docutils literal notranslate"><span class=3D"pre">expression=
</span></code></a>]
<strong id=3D"grammar-token-expression">expression            </strong> ::=
=3D  <a class=3D"reference internal" href=3D"https://docs.python.org/3/refe=
rence/expressions.html#grammar-token-conditional-expression"><code class=3D=
"xref docutils literal notranslate"><span class=3D"pre">conditional_express=
ion</span></code></a> | <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/reference/expressions.html#grammar-token-lambda-expr"><code =
class=3D"xref docutils literal notranslate"><span class=3D"pre">lambda_expr=
</span></code></a>
<strong id=3D"grammar-token-expression-nocond">expression_nocond     </stro=
ng> ::=3D  <a class=3D"reference internal" href=3D"https://docs.python.org/=
3/reference/expressions.html#grammar-token-or-test"><code class=3D"xref doc=
utils literal notranslate"><span class=3D"pre">or_test</span></code></a> | =
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#grammar-token-lambda-expr-nocond"><code class=3D"xref doc=
utils literal notranslate"><span class=3D"pre">lambda_expr_nocond</span></c=
ode></a>
</pre>
<p>Conditional expressions (sometimes called a =E2=80=9Cternary operator=E2=
=80=9D) have the lowest
priority of all Python operations.</p>
<p>The expression <code class=3D"docutils literal notranslate"><span class=
=3D"pre">x</span> <span class=3D"pre">if</span> <span class=3D"pre">C</span=
> <span class=3D"pre">else</span> <span class=3D"pre">y</span></code> first=
 evaluates the condition, <em>C</em> rather than <em>x</em>.
If <em>C</em> is true, <em>x</em> is evaluated and its value is returned; o=
therwise, <em>y</em> is
evaluated and its value is returned.</p>
<p>See <span class=3D"target" id=3D"index-86"></span><a class=3D"pep refere=
nce external" href=3D"https://www.python.org/dev/peps/pep-0308"><strong>PEP=
 308</strong></a> for more details about conditional expressions.</p>
</div>
<div class=3D"section" id=3D"lambda">
<span id=3D"lambdas"></span><span id=3D"id14"></span><h2><span class=3D"sec=
tion-number">6.13. </span>Lambdas<a class=3D"headerlink" href=3D"https://do=
cs.python.org/3/reference/expressions.html#lambda" title=3D"Permalink to th=
is headline">=C2=B6</a></h2>
<pre id=3D"index-87"><strong id=3D"grammar-token-lambda-expr">lambda_expr  =
     </strong> ::=3D  "lambda" [<a class=3D"reference internal" href=3D"htt=
ps://docs.python.org/3/reference/compound_stmts.html#grammar-token-paramete=
r-list"><code class=3D"xref docutils literal notranslate"><span class=3D"pr=
e">parameter_list</span></code></a>] ":" <a class=3D"reference internal" hr=
ef=3D"https://docs.python.org/3/reference/expressions.html#grammar-token-ex=
pression"><code class=3D"xref docutils literal notranslate"><span class=3D"=
pre">expression</span></code></a>
<strong id=3D"grammar-token-lambda-expr-nocond">lambda_expr_nocond</strong>=
 ::=3D  "lambda" [<a class=3D"reference internal" href=3D"https://docs.pyth=
on.org/3/reference/compound_stmts.html#grammar-token-parameter-list"><code =
class=3D"xref docutils literal notranslate"><span class=3D"pre">parameter_l=
ist</span></code></a>] ":" <a class=3D"reference internal" href=3D"https://=
docs.python.org/3/reference/expressions.html#grammar-token-expression-nocon=
d"><code class=3D"xref docutils literal notranslate"><span class=3D"pre">ex=
pression_nocond</span></code></a>
</pre>
<p>Lambda expressions (sometimes called lambda forms) are used to create an=
onymous
functions. The expression <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">lambda</span> <span class=3D"pre">parameters:</span> <span =
class=3D"pre">expression</span></code> yields a function
object.  The unnamed object behaves like a function object defined with:</p=
>
<div class=3D"highlight-none notranslate"><div class=3D"highlight"><pre><sp=
an></span>def &lt;lambda&gt;(parameters):
    return expression
</pre></div>
</div>
<p>See section <a class=3D"reference internal" href=3D"https://docs.python.=
org/3/reference/compound_stmts.html#function"><span class=3D"std std-ref">F=
unction definitions</span></a> for the syntax of parameter lists.  Note tha=
t
functions created with lambda expressions cannot contain statements or
annotations.</p>
</div>
<div class=3D"section" id=3D"expression-lists">
<span id=3D"exprlists"></span><h2><span class=3D"section-number">6.14. </sp=
an>Expression lists<a class=3D"headerlink" href=3D"https://docs.python.org/=
3/reference/expressions.html#expression-lists" title=3D"Permalink to this h=
eadline">=C2=B6</a></h2>
<pre id=3D"index-88"><strong id=3D"grammar-token-expression-list">expressio=
n_list   </strong> ::=3D  <a class=3D"reference internal" href=3D"https://d=
ocs.python.org/3/reference/expressions.html#grammar-token-expression"><code=
 class=3D"xref docutils literal notranslate"><span class=3D"pre">expression=
</span></code></a> ("," <a class=3D"reference internal" href=3D"https://doc=
s.python.org/3/reference/expressions.html#grammar-token-expression"><code c=
lass=3D"xref docutils literal notranslate"><span class=3D"pre">expression</=
span></code></a>)* [","]
<strong id=3D"grammar-token-starred-list">starred_list      </strong> ::=3D=
  <a class=3D"reference internal" href=3D"https://docs.python.org/3/referen=
ce/expressions.html#grammar-token-starred-item"><code class=3D"xref docutil=
s literal notranslate"><span class=3D"pre">starred_item</span></code></a> (=
"," <a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#grammar-token-starred-item"><code class=3D"xref docut=
ils literal notranslate"><span class=3D"pre">starred_item</span></code></a>=
)* [","]
<strong id=3D"grammar-token-starred-expression">starred_expression</strong>=
 ::=3D  <a class=3D"reference internal" href=3D"https://docs.python.org/3/r=
eference/expressions.html#grammar-token-expression"><code class=3D"xref doc=
utils literal notranslate"><span class=3D"pre">expression</span></code></a>=
 | (<a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#grammar-token-starred-item"><code class=3D"xref docut=
ils literal notranslate"><span class=3D"pre">starred_item</span></code></a>=
 ",")* [<a class=3D"reference internal" href=3D"https://docs.python.org/3/r=
eference/expressions.html#grammar-token-starred-item"><code class=3D"xref d=
ocutils literal notranslate"><span class=3D"pre">starred_item</span></code>=
</a>]
<strong id=3D"grammar-token-starred-item">starred_item      </strong> ::=3D=
  <a class=3D"reference internal" href=3D"https://docs.python.org/3/referen=
ce/expressions.html#grammar-token-expression"><code class=3D"xref docutils =
literal notranslate"><span class=3D"pre">expression</span></code></a> | "*"=
 <a class=3D"reference internal" href=3D"https://docs.python.org/3/referenc=
e/expressions.html#grammar-token-or-expr"><code class=3D"xref docutils lite=
ral notranslate"><span class=3D"pre">or_expr</span></code></a>
</pre>
<p id=3D"index-89">Except when part of a list or set display, an expression=
 list
containing at least one comma yields a tuple.  The length of
the tuple is the number of expressions in the list.  The expressions are
evaluated from left to right.</p>
<p id=3D"index-90">An asterisk <code class=3D"docutils literal notranslate"=
><span class=3D"pre">*</span></code> denotes <em class=3D"dfn">iterable unp=
acking</em>.  Its operand must be
an <a class=3D"reference internal" href=3D"https://docs.python.org/3/glossa=
ry.html#term-iterable"><span class=3D"xref std std-term">iterable</span></a=
>.  The iterable is expanded into a sequence of items,
which are included in the new tuple, list, or set, at the site of
the unpacking.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified added">New in version 3.5: </span>Iterabl=
e unpacking in expression lists, originally proposed by <span class=3D"targ=
et" id=3D"index-91"></span><a class=3D"pep reference external" href=3D"http=
s://www.python.org/dev/peps/pep-0448"><strong>PEP 448</strong></a>.</p>
</div>
<p id=3D"index-92">The trailing comma is required only to create a single t=
uple (a.k.a. a
<em>singleton</em>); it is optional in all other cases.  A single expressio=
n without a
trailing comma doesn=E2=80=99t create a tuple, but rather yields the value =
of that
expression. (To create an empty tuple, use an empty pair of parentheses:
<code class=3D"docutils literal notranslate"><span class=3D"pre">()</span><=
/code>.)</p>
</div>
<div class=3D"section" id=3D"evaluation-order">
<span id=3D"evalorder"></span><h2><span class=3D"section-number">6.15. </sp=
an>Evaluation order<a class=3D"headerlink" href=3D"https://docs.python.org/=
3/reference/expressions.html#evaluation-order" title=3D"Permalink to this h=
eadline">=C2=B6</a></h2>
<p id=3D"index-93">Python evaluates expressions from left to right.  Notice=
 that while evaluating
an assignment, the right-hand side is evaluated before the left-hand side.<=
/p>
<p>In the following lines, expressions will be evaluated in the arithmetic =
order of
their suffixes:</p>
<div class=3D"highlight-python3 notranslate" style=3D"position: relative;">=
<div class=3D"highlight"><pre><span></span><span class=3D"n">expr1</span><s=
pan class=3D"p">,</span> <span class=3D"n">expr2</span><span class=3D"p">,<=
/span> <span class=3D"n">expr3</span><span class=3D"p">,</span> <span class=
=3D"n">expr4</span>
<span class=3D"p">(</span><span class=3D"n">expr1</span><span class=3D"p">,=
</span> <span class=3D"n">expr2</span><span class=3D"p">,</span> <span clas=
s=3D"n">expr3</span><span class=3D"p">,</span> <span class=3D"n">expr4</spa=
n><span class=3D"p">)</span>
<span class=3D"p">{</span><span class=3D"n">expr1</span><span class=3D"p">:=
</span> <span class=3D"n">expr2</span><span class=3D"p">,</span> <span clas=
s=3D"n">expr3</span><span class=3D"p">:</span> <span class=3D"n">expr4</spa=
n><span class=3D"p">}</span>
<span class=3D"n">expr1</span> <span class=3D"o">+</span> <span class=3D"n"=
>expr2</span> <span class=3D"o">*</span> <span class=3D"p">(</span><span cl=
ass=3D"n">expr3</span> <span class=3D"o">-</span> <span class=3D"n">expr4</=
span><span class=3D"p">)</span>
<span class=3D"n">expr1</span><span class=3D"p">(</span><span class=3D"n">e=
xpr2</span><span class=3D"p">,</span> <span class=3D"n">expr3</span><span c=
lass=3D"p">,</span> <span class=3D"o">*</span><span class=3D"n">expr4</span=
><span class=3D"p">,</span> <span class=3D"o">**</span><span class=3D"n">ex=
pr5</span><span class=3D"p">)</span>
<span class=3D"n">expr3</span><span class=3D"p">,</span> <span class=3D"n">=
expr4</span> <span class=3D"o">=3D</span> <span class=3D"n">expr1</span><sp=
an class=3D"p">,</span> <span class=3D"n">expr2</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"operator-precedence">
<span id=3D"operator-summary"></span><h2><span class=3D"section-number">6.1=
6. </span>Operator precedence<a class=3D"headerlink" href=3D"https://docs.p=
ython.org/3/reference/expressions.html#operator-precedence" title=3D"Permal=
ink to this headline">=C2=B6</a></h2>
<p id=3D"index-94">The following table summarizes the operator precedence i=
n Python, from lowest
precedence (least binding) to highest precedence (most binding).  Operators=
 in
the same box have the same precedence.  Unless the syntax is explicitly giv=
en,
operators are binary.  Operators in the same box group left to right (excep=
t for
exponentiation, which groups from right to left).</p>
<p>Note that comparisons, membership tests, and identity tests, all have th=
e same
precedence and have a left-to-right chaining feature as described in the
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#comparisons"><span class=3D"std std-ref">Comparisons</spa=
n></a> section.</p>
<table class=3D"docutils align-default">
<colgroup>
<col style=3D"width: 56%">
<col style=3D"width: 44%">
</colgroup>
<thead>
<tr class=3D"row-odd"><th class=3D"head"><p>Operator</p></th>
<th class=3D"head"><p>Description</p></th>
</tr>
</thead>
<tbody>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">:=3D</span></code></p></td>
<td><p>Assignment expression</p></td>
</tr>
<tr class=3D"row-odd"><td><p><a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/reference/expressions.html#lambda"><code class=3D"xref =
std std-keyword docutils literal notranslate"><span class=3D"pre">lambda</s=
pan></code></a></p></td>
<td><p>Lambda expression</p></td>
</tr>
<tr class=3D"row-even"><td><p><a class=3D"reference internal" href=3D"https=
://docs.python.org/3/reference/expressions.html#if-expr"><code class=3D"xre=
f std std-keyword docutils literal notranslate"><span class=3D"pre">if</spa=
n></code></a> =E2=80=93 <code class=3D"xref std std-keyword docutils litera=
l notranslate"><span class=3D"pre">else</span></code></p></td>
<td><p>Conditional expression</p></td>
</tr>
<tr class=3D"row-odd"><td><p><a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/reference/expressions.html#or"><code class=3D"xref std =
std-keyword docutils literal notranslate"><span class=3D"pre">or</span></co=
de></a></p></td>
<td><p>Boolean OR</p></td>
</tr>
<tr class=3D"row-even"><td><p><a class=3D"reference internal" href=3D"https=
://docs.python.org/3/reference/expressions.html#and"><code class=3D"xref st=
d std-keyword docutils literal notranslate"><span class=3D"pre">and</span><=
/code></a></p></td>
<td><p>Boolean AND</p></td>
</tr>
<tr class=3D"row-odd"><td><p><a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/reference/expressions.html#not"><code class=3D"xref std=
 std-keyword docutils literal notranslate"><span class=3D"pre">not</span></=
code></a> <code class=3D"docutils literal notranslate"><span class=3D"pre">=
x</span></code></p></td>
<td><p>Boolean NOT</p></td>
</tr>
<tr class=3D"row-even"><td><p><a class=3D"reference internal" href=3D"https=
://docs.python.org/3/reference/expressions.html#in"><code class=3D"xref std=
 std-keyword docutils literal notranslate"><span class=3D"pre">in</span></c=
ode></a>, <a class=3D"reference internal" href=3D"https://docs.python.org/3=
/reference/expressions.html#not-in"><code class=3D"xref std std-keyword doc=
utils literal notranslate"><span class=3D"pre">not</span> <span class=3D"pr=
e">in</span></code></a>,
<a class=3D"reference internal" href=3D"https://docs.python.org/3/reference=
/expressions.html#is"><code class=3D"xref std std-keyword docutils literal =
notranslate"><span class=3D"pre">is</span></code></a>, <a class=3D"referenc=
e internal" href=3D"https://docs.python.org/3/reference/expressions.html#is=
-not"><code class=3D"xref std std-keyword docutils literal notranslate"><sp=
an class=3D"pre">is</span> <span class=3D"pre">not</span></code></a>, <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">&lt;</span></co=
de>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">&lt;=3D</s=
pan></code>, <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">&gt;</span></code>, <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">&gt;=3D</span></code>, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">!=3D</span></code>, <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">=3D=3D</span></code></p></td>
<td><p>Comparisons, including membership
tests and identity tests</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">|</span></code></p></td>
<td><p>Bitwise OR</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">^</span></code></p></td>
<td><p>Bitwise XOR</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">&amp;</span></code></p></td>
<td><p>Bitwise AND</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">&lt;&lt;</span></code>, <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">&gt;&gt;</span></code></p></td>
<td><p>Shifts</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">+</span></code>, <code class=3D"docutils literal notrans=
late"><span class=3D"pre">-</span></code></p></td>
<td><p>Addition and subtraction</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">*</span></code>, <code class=3D"docutils literal notran=
slate"><span class=3D"pre">@</span></code>, <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">/</span></code>, <code class=3D"docutils =
literal notranslate"><span class=3D"pre">//</span></code>, <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">%</span></code></p></td>
<td><p>Multiplication, matrix
multiplication, division, floor
division, remainder <a class=3D"footnote-reference brackets" href=3D"https:=
//docs.python.org/3/reference/expressions.html#id21" id=3D"id15">5</a></p><=
/td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">+x</span></code>, <code class=3D"docutils literal notran=
slate"><span class=3D"pre">-x</span></code>, <code class=3D"docutils litera=
l notranslate"><span class=3D"pre">~x</span></code></p></td>
<td><p>Positive, negative, bitwise NOT</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">**</span></code></p></td>
<td><p>Exponentiation <a class=3D"footnote-reference brackets" href=3D"http=
s://docs.python.org/3/reference/expressions.html#id22" id=3D"id16">6</a></p=
></td>
</tr>
<tr class=3D"row-odd"><td><p><a class=3D"reference internal" href=3D"https:=
//docs.python.org/3/reference/expressions.html#await"><code class=3D"xref s=
td std-keyword docutils literal notranslate"><span class=3D"pre">await</spa=
n></code></a> <code class=3D"docutils literal notranslate"><span class=3D"p=
re">x</span></code></p></td>
<td><p>Await expression</p></td>
</tr>
<tr class=3D"row-even"><td><p><code class=3D"docutils literal notranslate">=
<span class=3D"pre">x[index]</span></code>, <code class=3D"docutils literal=
 notranslate"><span class=3D"pre">x[index:index]</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">x(argument=
s...)</span></code>, <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">x.attribute</span></code></p></td>
<td><p>Subscription, slicing,
call, attribute reference</p></td>
</tr>
<tr class=3D"row-odd"><td><p><code class=3D"docutils literal notranslate"><=
span class=3D"pre">(expressions...)</span></code>,</p>
<p><code class=3D"docutils literal notranslate"><span class=3D"pre">[expres=
sions...]</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">{key:</spa=
n> <span class=3D"pre">value...}</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">{expressio=
ns...}</span></code></p>
</td>
<td><p>Binding or parenthesized
expression,
list display,
dictionary display,
set display</p></td>
</tr>
</tbody>
</table>
<p class=3D"rubric">Footnotes</p>
<dl class=3D"footnote brackets">
<dt class=3D"label" id=3D"id17"><span class=3D"brackets"><a class=3D"fn-bac=
kref" href=3D"https://docs.python.org/3/reference/expressions.html#id9">1</=
a></span></dt>
<dd><p>While <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">abs(x%y)</span> <span class=3D"pre">&lt;</span> <span class=3D"pre">abs(=
y)</span></code> is true mathematically, for floats it may not be
true numerically due to roundoff.  For example, and assuming a platform on =
which
a Python float is an IEEE 754 double-precision number, in order that <code =
class=3D"docutils literal notranslate"><span class=3D"pre">-1e-100</span> <=
span class=3D"pre">%</span>
<span class=3D"pre">1e100</span></code> have the same sign as <code class=
=3D"docutils literal notranslate"><span class=3D"pre">1e100</span></code>, =
the computed result is <code class=3D"docutils literal notranslate"><span c=
lass=3D"pre">-1e-100</span> <span class=3D"pre">+</span>
<span class=3D"pre">1e100</span></code>, which is numerically exactly equal=
 to <code class=3D"docutils literal notranslate"><span class=3D"pre">1e100<=
/span></code>.  The function
<a class=3D"reference internal" href=3D"https://docs.python.org/3/library/m=
ath.html#math.fmod" title=3D"math.fmod"><code class=3D"xref py py-func docu=
tils literal notranslate"><span class=3D"pre">math.fmod()</span></code></a>=
 returns a result whose sign matches the sign of the
first argument instead, and so returns <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">-1e-100</span></code> in this case. Which appr=
oach
is more appropriate depends on the application.</p>
</dd>
<dt class=3D"label" id=3D"id18"><span class=3D"brackets"><a class=3D"fn-bac=
kref" href=3D"https://docs.python.org/3/reference/expressions.html#id10">2<=
/a></span></dt>
<dd><p>If x is very close to an exact integer multiple of y, it=E2=80=99s p=
ossible for
<code class=3D"docutils literal notranslate"><span class=3D"pre">x//y</span=
></code> to be one larger than <code class=3D"docutils literal notranslate"=
><span class=3D"pre">(x-x%y)//y</span></code> due to rounding.  In such
cases, Python returns the latter result, in order to preserve that
<code class=3D"docutils literal notranslate"><span class=3D"pre">divmod(x,y=
)[0]</span> <span class=3D"pre">*</span> <span class=3D"pre">y</span> <span=
 class=3D"pre">+</span> <span class=3D"pre">x</span> <span class=3D"pre">%<=
/span> <span class=3D"pre">y</span></code> be very close to <code class=3D"=
docutils literal notranslate"><span class=3D"pre">x</span></code>.</p>
</dd>
<dt class=3D"label" id=3D"id19"><span class=3D"brackets"><a class=3D"fn-bac=
kref" href=3D"https://docs.python.org/3/reference/expressions.html#id12">3<=
/a></span></dt>
<dd><p>The Unicode standard distinguishes between <em class=3D"dfn">code po=
ints</em>
(e.g. U+0041) and <em class=3D"dfn">abstract characters</em> (e.g. =E2=80=
=9CLATIN CAPITAL LETTER A=E2=80=9D).
While most abstract characters in Unicode are only represented using one
code point, there is a number of abstract characters that can in addition b=
e
represented using a sequence of more than one code point.  For example, the
abstract character =E2=80=9CLATIN CAPITAL LETTER C WITH CEDILLA=E2=80=9D ca=
n be represented
as a single <em class=3D"dfn">precomposed character</em> at code position U=
+00C7, or as a
sequence of a <em class=3D"dfn">base character</em> at code position U+0043=
 (LATIN CAPITAL
LETTER C), followed by a <em class=3D"dfn">combining character</em> at code=
 position U+0327
(COMBINING CEDILLA).</p>
<p>The comparison operators on strings compare at the level of Unicode code
points. This may be counter-intuitive to humans.  For example,
<code class=3D"docutils literal notranslate"><span class=3D"pre">"\u00C7"</=
span> <span class=3D"pre">=3D=3D</span> <span class=3D"pre">"\u0043\u0327"<=
/span></code> is <code class=3D"docutils literal notranslate"><span class=
=3D"pre">False</span></code>, even though both strings
represent the same abstract character =E2=80=9CLATIN CAPITAL LETTER C WITH =
CEDILLA=E2=80=9D.</p>
<p>To compare strings at the level of abstract characters (that is, in a wa=
y
intuitive to humans), use <a class=3D"reference internal" href=3D"https://d=
ocs.python.org/3/library/unicodedata.html#unicodedata.normalize" title=3D"u=
nicodedata.normalize"><code class=3D"xref py py-func docutils literal notra=
nslate"><span class=3D"pre">unicodedata.normalize()</span></code></a>.</p>
</dd>
<dt class=3D"label" id=3D"id20"><span class=3D"brackets"><a class=3D"fn-bac=
kref" href=3D"https://docs.python.org/3/reference/expressions.html#id13">4<=
/a></span></dt>
<dd><p>Due to automatic garbage-collection, free lists, and the dynamic nat=
ure of
descriptors, you may notice seemingly unusual behaviour in certain uses of
the <a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#is"><code class=3D"xref std std-keyword docutils lite=
ral notranslate"><span class=3D"pre">is</span></code></a> operator, like th=
ose involving comparisons between instance
methods, or constants.  Check their documentation for more info.</p>
</dd>
<dt class=3D"label" id=3D"id21"><span class=3D"brackets"><a class=3D"fn-bac=
kref" href=3D"https://docs.python.org/3/reference/expressions.html#id15">5<=
/a></span></dt>
<dd><p>The <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>%</span></code> operator is also used for string formatting; the same
precedence applies.</p>
</dd>
<dt class=3D"label" id=3D"id22"><span class=3D"brackets"><a class=3D"fn-bac=
kref" href=3D"https://docs.python.org/3/reference/expressions.html#id16">6<=
/a></span></dt>
<dd><p>The power operator <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">**</span></code> binds less tightly than an arithmetic or
bitwise unary operator on its right, that is, <code class=3D"docutils liter=
al notranslate"><span class=3D"pre">2**-1</span></code> is <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">0.5</span></code>.</p>
</dd>
</dl>
</div>
</div>


          </div>
        </div>
      </div>
      <div class=3D"sphinxsidebar" role=3D"navigation" aria-label=3D"main n=
avigation">
        <div class=3D"sphinxsidebarwrapper" style=3D"float: left; margin-ri=
ght: 0px; width: 201.995px; top: 19958.7px;">
  <h3><a href=3D"https://docs.python.org/3/contents.html">Table of Contents=
</a></h3>
  <ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#">6. Expressions</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#arithmetic-conversions">6.1. Arithmetic conversions</=
a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#atoms">6.2. Atoms</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#atom-identifiers">6.2.1. Identifiers (Names)</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#literals">6.2.2. Literals</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#parenthesized-forms">6.2.3. Parenthesized forms</a></=
li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#displays-for-lists-sets-and-dictionaries">6.2.4. Disp=
lays for lists, sets and dictionaries</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#list-displays">6.2.5. List displays</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#set-displays">6.2.6. Set displays</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#dictionary-displays">6.2.7. Dictionary displays</a></=
li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#generator-expressions">6.2.8. Generator expressions</=
a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#yield-expressions">6.2.9. Yield expressions</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#generator-iterator-methods">6.2.9.1. Generator-iterat=
or methods</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#examples">6.2.9.2. Examples</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#asynchronous-generator-functions">6.2.9.3. Asynchrono=
us generator functions</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#asynchronous-generator-iterator-methods">6.2.9.4. Asy=
nchronous generator-iterator methods</a></li>
</ul>
</li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#primaries">6.3. Primaries</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#attribute-references">6.3.1. Attribute references</a>=
</li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#subscriptions">6.3.2. Subscriptions</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#slicings">6.3.3. Slicings</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#calls">6.3.4. Calls</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#await-expression">6.4. Await expression</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#the-power-operator">6.5. The power operator</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#unary-arithmetic-and-bitwise-operations">6.6. Unary a=
rithmetic and bitwise operations</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#binary-arithmetic-operations">6.7. Binary arithmetic =
operations</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#shifting-operations">6.8. Shifting operations</a></li=
>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#binary-bitwise-operations">6.9. Binary bitwise operat=
ions</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#comparisons">6.10. Comparisons</a><ul>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#value-comparisons">6.10.1. Value comparisons</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#membership-test-operations">6.10.2. Membership test o=
perations</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#is-not">6.10.3. Identity comparisons</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#boolean-operations">6.11. Boolean operations</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#conditional-expressions">6.12. Conditional expression=
s</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#lambda">6.13. Lambdas</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#expression-lists">6.14. Expression lists</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#evaluation-order">6.15. Evaluation order</a></li>
<li><a class=3D"reference internal" href=3D"https://docs.python.org/3/refer=
ence/expressions.html#operator-precedence">6.16. Operator precedence</a></l=
i>
</ul>
</li>
</ul>

  <h4>Previous topic</h4>
  <p class=3D"topless"><a href=3D"https://docs.python.org/3/reference/impor=
t.html" title=3D"previous chapter"><span class=3D"section-number">5. </span=
>The import system</a></p>
  <h4>Next topic</h4>
  <p class=3D"topless"><a href=3D"https://docs.python.org/3/reference/simpl=
e_stmts.html" title=3D"next chapter"><span class=3D"section-number">7. </sp=
an>Simple statements</a></p>
  <div role=3D"note" aria-label=3D"source link">
    <h3>This Page</h3>
    <ul class=3D"this-page-menu">
      <li><a href=3D"https://docs.python.org/3/bugs.html">Report a Bug</a><=
/li>
      <li>
        <a href=3D"https://github.com/python/cpython/blob/3.8/Doc/reference=
/expressions.rst" rel=3D"nofollow">Show Source
        </a>
      </li>
    </ul>
  </div>
        </div>
      <div id=3D"sidebarbutton" title=3D"Collapse sidebar" style=3D"border-=
radius: 0px 5px 5px 0px; color: rgb(68, 68, 68); background-color: rgb(204,=
 204, 204); font-size: 1.2em; cursor: pointer; height: 27015.1px; padding-t=
op: 1px; padding-left: 1px; margin-left: 217.995px;"><span style=3D"display=
: block; position: fixed; top: 400.5px;">=C2=AB</span></div></div>
      <div class=3D"clearer"></div>
    </div> =20
    <div class=3D"related" role=3D"navigation" aria-label=3D"related naviga=
tion">
      <h3>Navigation</h3>
      <ul>
        <li class=3D"right" style=3D"margin-right: 10px">
          <a href=3D"https://docs.python.org/3/genindex.html" title=3D"Gene=
ral Index">index</a></li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/py-modindex.html" title=3D"P=
ython Module Index">modules</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/reference/simple_stmts.html"=
 title=3D"7. Simple statements">next</a> |</li>
        <li class=3D"right">
          <a href=3D"https://docs.python.org/3/reference/import.html" title=
=3D"5. The import system">previous</a> |</li>

    <li><img src=3D"https://docs.python.org/3/_static/py.png" alt=3D"" styl=
e=3D"vertical-align: middle; margin-top: -1px"></li>
    <li><a href=3D"https://www.python.org/">Python</a> =C2=BB</li>
   =20

    <li>
      <span class=3D"language_switcher_placeholder"><select><option value=
=3D"en" selected=3D"selected">English</option><option value=3D"fr">French</=
option><option value=3D"ja">Japanese</option><option value=3D"ko">Korean</o=
ption><option value=3D"pt-br">Brazilian Portuguese</option><option value=3D=
"zh-cn">Simplified Chinese</option></select></span>
      <span class=3D"version_switcher_placeholder"><select><option value=3D=
"3.9">dev (3.9)</option><option value=3D"3.8" selected=3D"selected">3.8.1</=
option><option value=3D"3.7">3.7</option><option value=3D"3.6">3.6</option>=
<option value=3D"3.5">3.5</option><option value=3D"2.7">2.7</option></selec=
t></span>
      <a href=3D"https://docs.python.org/3/index.html">Documentation </a> =
=C2=BB
    </li>

          <li class=3D"nav-item nav-item-1"><a href=3D"https://docs.python.=
org/3/reference/index.html">The Python Language Reference</a> =C2=BB</li>
    <li class=3D"right">
       =20

    <div class=3D"inline-search" style=3D"" role=3D"search">
        <form class=3D"inline-search" action=3D"https://docs.python.org/3/s=
earch.html" method=3D"get">
          <input placeholder=3D"Quick search" type=3D"text" name=3D"q">
          <input type=3D"submit" value=3D"Go">
         =20
         =20
        </form>
    </div>
   =20
         |
    </li>

      </ul>
    </div> =20
    <div class=3D"footer">
    =C2=A9 <a href=3D"https://docs.python.org/3/copyright.html">Copyright</=
a> 2001-2020, Python Software Foundation.
    <br>

    The Python Software Foundation is a non-profit corporation.
<a href=3D"https://www.python.org/psf/donations/">Please donate.</a>
<br>
    <br>

    Last updated on Jan 27, 2020.
    <a href=3D"https://docs.python.org/3/bugs.html">Found a bug</a>?
    <br>

    Created using <a href=3D"http://sphinx.pocoo.org/">Sphinx</a> 2.3.1.
    </div>

 =20
</body></html>
------MultipartBoundary--pqKor7BVEUh96UTtccQ369JDE6tshTqMPrnc3Soavt----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-df77f20e-c09b-425c-a602-7f2609ac8dd9@mhtml.blink

@charset "utf-8";

@media only screen {
  table.full-width-table { width: 100%; }
}
------MultipartBoundary--pqKor7BVEUh96UTtccQ369JDE6tshTqMPrnc3Soavt----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/pydoctheme.css

@charset "utf-8";

@import url("default.css");

body { background-color: white; margin-left: 1em; margin-right: 1em; }

div.related { margin-bottom: 1.2em; padding: 0.5em 0px; border-top: 1px sol=
id rgb(204, 204, 204); margin-top: 0.5em; }

div.related a:hover { color: rgb(0, 149, 196); }

div.related:first-child { border-top: 0px; border-bottom: 1px solid rgb(204=
, 204, 204); }

.inline-search { display: inline; }

form.inline-search input { display: inline; }

form.inline-search input[type=3D"submit"] { width: 40px; }

div.sphinxsidebar { background-color: rgb(238, 238, 238); border-radius: 5p=
x; line-height: 130%; font-size: smaller; }

div.sphinxsidebar h3, div.sphinxsidebar h4 { margin-top: 1.5em; }

div.sphinxsidebarwrapper > h3:first-child { margin-top: 0.2em; }

div.sphinxsidebarwrapper > ul > li > ul > li { margin-bottom: 0.4em; }

div.sphinxsidebar a:hover { color: rgb(0, 149, 196); }

form.inline-search input, div.sphinxsidebar input { font-family: "Lucida Gr=
ande", Arial, sans-serif; border: 1px solid rgb(153, 153, 153); font-size: =
smaller; border-radius: 3px; }

div.sphinxsidebar input[type=3D"text"] { max-width: 150px; }

div.body { padding: 0px 0px 0px 1.2em; }

div.body p { line-height: 140%; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h=
6 { margin: 0px; border: 0px; padding: 0.3em 0px; }

div.body hr { border: 0px; background-color: rgb(204, 204, 204); height: 1p=
x; }

div.body pre { border-radius: 3px; border: 1px solid rgb(170, 204, 153); }

div.body div.admonition, div.body div.impl-detail { border-radius: 3px; }

div.body div.impl-detail > p { margin: 0px; }

div.body div.seealso { border: 1px solid rgb(221, 221, 102); }

div.body a { color: rgb(0, 114, 170); }

div.body a:visited { color: rgb(99, 99, 187); }

div.body a:hover { color: rgb(0, 176, 228); }

tt, code, pre { font-family: monospace, sans-serif; font-size: 96.5%; }

div.body tt, div.body code { border-radius: 3px; }

div.body tt.descname, div.body code.descname { font-size: 120%; }

div.body tt.xref, div.body a tt, div.body code.xref, div.body a code { font=
-weight: normal; }

.deprecated { border-radius: 3px; }

table.docutils { border: 1px solid rgb(221, 221, 221); min-width: 20%; bord=
er-radius: 3px; margin-top: 10px; margin-bottom: 10px; }

table.docutils td, table.docutils th { border-radius: 3px; border: 1px soli=
d rgb(221, 221, 221) !important; }

table p, table li { text-align: left !important; }

table.docutils th { background-color: rgb(238, 238, 238); padding: 0.3em 0.=
5em; }

table.docutils td { background-color: white; padding: 0.3em 0.5em; }

table.footnote, table.footnote td { border: 0px !important; }

div.footer { line-height: 150%; margin-top: -2em; text-align: right; width:=
 auto; margin-right: 10px; }

div.footer a:hover { color: rgb(0, 149, 196); }

.refcount { color: rgb(0, 102, 0); }

.stableabi { color: rgb(34, 34, 153); }

.highlight { background: none !important; }
------MultipartBoundary--pqKor7BVEUh96UTtccQ369JDE6tshTqMPrnc3Soavt----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/default.css

@charset "utf-8";

@import url("classic.css");
------MultipartBoundary--pqKor7BVEUh96UTtccQ369JDE6tshTqMPrnc3Soavt----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/classic.css

@charset "utf-8";

@import url("basic.css");

html { background-color: rgb(255, 255, 255); }

body { font-family: "Lucida Grande", Arial, sans-serif; font-size: 100%; ba=
ckground-color: white; color: rgb(0, 0, 0); margin: 0px; padding: 0px; }

div.document { background-color: white; }

div.documentwrapper { float: left; width: 100%; }

div.bodywrapper { margin: 0px 0px 0px 230px; }

div.body { background-color: white; color: rgb(34, 34, 34); padding: 0px 20=
px 30px; }

div.footer { color: rgb(85, 85, 85); width: 100%; padding: 9px 0px; text-al=
ign: center; font-size: 75%; }

div.footer a { color: rgb(85, 85, 85); text-decoration: underline; }

div.related { background-color: white; line-height: 30px; color: rgb(102, 1=
02, 102); }

div.related a { color: rgb(68, 68, 68); }

div.sphinxsidebar { }

div.sphinxsidebar h3 { font-family: "Lucida Grande", Arial, sans-serif; col=
or: rgb(68, 68, 68); font-size: 1.4em; font-weight: normal; margin: 0px; pa=
dding: 0px; }

div.sphinxsidebar h3 a { color: rgb(68, 68, 68); }

div.sphinxsidebar h4 { font-family: "Lucida Grande", Arial, sans-serif; col=
or: rgb(68, 68, 68); font-size: 1.3em; font-weight: normal; margin: 5px 0px=
 0px; padding: 0px; }

div.sphinxsidebar p { color: rgb(68, 68, 68); }

div.sphinxsidebar p.topless { margin: 5px 10px 10px; }

div.sphinxsidebar ul { margin: 10px; padding: 0px; color: rgb(68, 68, 68); =
}

div.sphinxsidebar a { color: rgb(68, 68, 68); }

div.sphinxsidebar input { border: 1px solid rgb(68, 68, 68); font-family: s=
ans-serif; font-size: 1em; }

div#sidebarbutton { background-color: rgb(60, 110, 131); }

a { color: rgb(0, 144, 192); text-decoration: none; }

a:visited { color: rgb(0, 96, 143); text-decoration: none; }

a:hover { text-decoration: underline; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h=
6 { font-family: "Lucida Grande", Arial, sans-serif; background-color: whit=
e; font-weight: normal; color: rgb(26, 26, 26); border-bottom: 1px solid rg=
b(204, 204, 204); margin: 20px -20px 10px; padding: 3px 0px 3px 10px; }

div.body h1 { margin-top: 0px; font-size: 200%; }

div.body h2 { font-size: 160%; }

div.body h3 { font-size: 140%; }

div.body h4 { font-size: 120%; }

div.body h5 { font-size: 110%; }

div.body h6 { font-size: 100%; }

a.headerlink { color: rgb(170, 170, 170); font-size: 0.8em; padding: 0px 4p=
x; text-decoration: none; }

a.headerlink:hover { background-color: rgb(170, 170, 170); color: white; }

div.body p, div.body dd, div.body li, div.body blockquote { text-align: jus=
tify; line-height: 130%; }

div.admonition p.admonition-title + p { display: inline; }

div.admonition p { margin-bottom: 5px; }

div.admonition pre { margin-bottom: 5px; }

div.admonition ul, div.admonition ol { margin-bottom: 5px; }

div.note { background-color: rgb(238, 238, 238); border: 1px solid rgb(204,=
 204, 204); }

div.seealso { background-color: rgb(255, 255, 204); border: 1px solid rgb(2=
55, 255, 102); }

div.topic { background-color: rgb(238, 238, 238); }

div.warning { background-color: rgb(255, 228, 228); border: 1px solid rgb(2=
55, 102, 102); }

p.admonition-title { display: inline; }

p.admonition-title::after { content: ":"; }

pre { padding: 5px; background-color: rgb(238, 255, 204); color: rgb(51, 51=
, 51); line-height: 120%; border-top: 1px solid rgb(170, 204, 153); border-=
bottom: 1px solid rgb(170, 204, 153); border-image: initial; border-left: n=
one; border-right: none; }

code { background-color: rgb(236, 240, 243); padding: 0px 1px; font-size: 0=
.95em; }

th, dl.field-list > dt { background-color: rgb(238, 221, 238); }

.warning code { background: rgb(239, 194, 194); }

.note code { background: rgb(214, 214, 214); }

.viewcode-back { font-family: "Lucida Grande", Arial, sans-serif; }

div.viewcode-block:target { background-color: rgb(244, 222, 191); border-to=
p: 1px solid rgb(170, 204, 153); border-bottom: 1px solid rgb(170, 204, 153=
); }

div.code-block-caption { color: rgb(239, 239, 239); background-color: rgb(2=
8, 78, 99); }
------MultipartBoundary--pqKor7BVEUh96UTtccQ369JDE6tshTqMPrnc3Soavt----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/basic.css

@charset "utf-8";

div.clearer { clear: both; }

div.related { width: 100%; font-size: 90%; }

div.related h3 { display: none; }

div.related ul { margin: 0px; padding: 0px 0px 0px 10px; list-style: none; =
}

div.related li { display: inline; }

div.related li.right { float: right; margin-right: 5px; }

div.sphinxsidebarwrapper { padding: 10px 5px 0px 10px; }

div.sphinxsidebar { float: left; width: 230px; margin-left: -100%; font-siz=
e: 90%; overflow-wrap: break-word; }

div.sphinxsidebar ul { list-style: none; }

div.sphinxsidebar ul ul, div.sphinxsidebar ul.want-points { margin-left: 20=
px; list-style: square; }

div.sphinxsidebar ul ul { margin-top: 0px; margin-bottom: 0px; }

div.sphinxsidebar form { margin-top: 10px; }

div.sphinxsidebar input { border: 1px solid rgb(152, 219, 204); font-family=
: sans-serif; font-size: 1em; }

div.sphinxsidebar #searchbox form.search { overflow: hidden; }

div.sphinxsidebar #searchbox input[type=3D"text"] { float: left; width: 80%=
; padding: 0.25em; box-sizing: border-box; }

div.sphinxsidebar #searchbox input[type=3D"submit"] { float: left; width: 2=
0%; border-left: none; padding: 0.25em; box-sizing: border-box; }

img { border: 0px; max-width: 100%; }

ul.search { margin: 10px 0px 0px 20px; padding: 0px; }

ul.search li { padding: 5px 0px 5px 20px; background-image: url("file.png")=
; background-repeat: no-repeat; background-position: 0px 7px; }

ul.search li a { font-weight: bold; }

ul.search li div.context { color: rgb(136, 136, 136); margin: 2px 0px 0px 3=
0px; text-align: left; }

ul.keywordmatches li.goodmatch a { font-weight: bold; }

table.contentstable { width: 90%; margin-left: auto; margin-right: auto; }

table.contentstable p.biglink { line-height: 150%; }

a.biglink { font-size: 1.3em; }

span.linkdescr { font-style: italic; padding-top: 5px; font-size: 90%; }

table.indextable { width: 100%; }

table.indextable td { text-align: left; vertical-align: top; }

table.indextable ul { margin-top: 0px; margin-bottom: 0px; list-style-type:=
 none; }

table.indextable > tbody > tr > td > ul { padding-left: 0em; }

table.indextable tr.pcap { height: 10px; }

table.indextable tr.cap { margin-top: 10px; background-color: rgb(242, 242,=
 242); }

img.toggler { margin-right: 3px; margin-top: 3px; cursor: pointer; }

div.modindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

div.genindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

table.modindextable td { padding: 2px; border-collapse: collapse; }

div.body { min-width: 450px; max-width: 800px; }

div.body p, div.body dd, div.body li, div.body blockquote { }

a.headerlink { visibility: hidden; }

a.brackets::before, span.brackets > a::before { content: "["; }

a.brackets::after, span.brackets > a::after { content: "]"; }

h1:hover > a.headerlink, h2:hover > a.headerlink, h3:hover > a.headerlink, =
h4:hover > a.headerlink, h5:hover > a.headerlink, h6:hover > a.headerlink, =
dt:hover > a.headerlink, caption:hover > a.headerlink, p.caption:hover > a.=
headerlink, div.code-block-caption:hover > a.headerlink { visibility: visib=
le; }

div.body p.caption { text-align: inherit; }

div.body td { text-align: left; }

.first { margin-top: 0px !important; }

p.rubric { margin-top: 30px; font-weight: bold; }

img.align-left, .figure.align-left, object.align-left { clear: left; float:=
 left; margin-right: 1em; }

img.align-right, .figure.align-right, object.align-right { clear: right; fl=
oat: right; margin-left: 1em; }

img.align-center, .figure.align-center, object.align-center { display: bloc=
k; margin-left: auto; margin-right: auto; }

img.align-default, .figure.align-default { display: block; margin-left: aut=
o; margin-right: auto; }

.align-left { text-align: left; }

.align-center { text-align: center; }

.align-default { text-align: center; }

.align-right { text-align: right; }

div.sidebar { margin: 0px 0px 0.5em 1em; border: 1px solid rgb(221, 221, 18=
7); padding: 7px 7px 0px; background-color: rgb(255, 255, 238); width: 40%;=
 float: right; }

p.sidebar-title { font-weight: bold; }

div.topic { border: 1px solid rgb(204, 204, 204); padding: 7px 7px 0px; mar=
gin: 10px 0px; }

p.topic-title { font-size: 1.1em; font-weight: bold; margin-top: 10px; }

div.admonition { margin-top: 10px; margin-bottom: 10px; padding: 7px; }

div.admonition dt { font-weight: bold; }

div.admonition dl { margin-bottom: 0px; }

p.admonition-title { margin: 0px 10px 5px 0px; font-weight: bold; }

div.body p.centered { text-align: center; margin-top: 25px; }

table.docutils { border: 0px; border-collapse: collapse; }

table.align-center { margin-left: auto; margin-right: auto; }

table.align-default { margin-left: auto; margin-right: auto; }

table caption span.caption-number { font-style: italic; }

table caption span.caption-text { }

table.docutils td, table.docutils th { padding: 1px 8px 1px 5px; border-wid=
th: 0px 0px 1px; border-top-style: initial; border-top-color: initial; bord=
er-left-style: initial; border-left-color: initial; border-right-style: ini=
tial; border-right-color: initial; border-bottom-style: solid; border-botto=
m-color: rgb(170, 170, 170); }

table.footnote td, table.footnote th { border: 0px !important; }

th { text-align: left; padding-right: 5px; }

table.citation { border-left: 1px solid gray; margin-left: 1px; }

table.citation td { border-bottom: none; }

th > p:first-child, td > p:first-child { margin-top: 0px; }

th > p:last-child, td > p:last-child { margin-bottom: 0px; }

div.figure { margin: 0.5em; padding: 0.5em; }

div.figure p.caption { padding: 0.3em; }

div.figure p.caption span.caption-number { font-style: italic; }

div.figure p.caption span.caption-text { }

table.field-list td, table.field-list th { border: 0px !important; }

.field-list ul { margin: 0px; padding-left: 1em; }

.field-list p { margin: 0px; }

.field-name { hyphens: manual; }

table.hlist td { vertical-align: top; }

ol.arabic { list-style: decimal; }

ol.loweralpha { list-style: lower-alpha; }

ol.upperalpha { list-style: upper-alpha; }

ol.lowerroman { list-style: lower-roman; }

ol.upperroman { list-style: upper-roman; }

li > p:first-child { margin-top: 0px; }

li > p:last-child { margin-bottom: 0px; }

dl.footnote > dt, dl.citation > dt { float: left; }

dl.footnote > dd, dl.citation > dd { margin-bottom: 0em; }

dl.footnote > dd::after, dl.citation > dd::after { content: ""; clear: both=
; }

dl.field-list { display: grid; grid-template-columns: fit-content(30%) auto=
; }

dl.field-list > dt { font-weight: bold; word-break: break-word; padding-lef=
t: 0.5em; padding-right: 5px; }

dl.field-list > dt::after { content: ":"; }

dl.field-list > dd { padding-left: 0.5em; margin-top: 0em; margin-left: 0em=
; margin-bottom: 0em; }

dl { margin-bottom: 15px; }

dd > p:first-child { margin-top: 0px; }

dd ul, dd table { margin-bottom: 10px; }

dd { margin-top: 3px; margin-bottom: 10px; margin-left: 30px; }

dt:target, span.highlighted { background-color: rgb(251, 229, 78); }

rect.highlighted { fill: rgb(251, 229, 78); }

dl.glossary dt { font-weight: bold; font-size: 1.1em; }

.optional { font-size: 1.3em; }

.sig-paren { font-size: larger; }

.versionmodified { font-style: italic; }

.system-message { background-color: rgb(255, 221, 170); padding: 5px; borde=
r: 3px solid red; }

.footnote:target { background-color: rgb(255, 255, 170); }

.line-block { display: block; margin-top: 1em; margin-bottom: 1em; }

.line-block .line-block { margin-top: 0px; margin-bottom: 0px; margin-left:=
 1.5em; }

.guilabel, .menuselection { font-family: sans-serif; }

.accelerator { text-decoration: underline; }

.classifier { font-style: oblique; }

.classifier::before { font-style: normal; margin: 0.5em; content: ":"; }

abbr, acronym { border-bottom: 1px dotted; cursor: help; }

pre { overflow: auto hidden; }

span.pre { hyphens: none; }

td.linenos pre { padding: 5px 0px; border: 0px; background-color: transpare=
nt; color: rgb(170, 170, 170); }

table.highlighttable { margin-left: 0.5em; }

table.highlighttable td { padding: 0px 0.5em; }

div.code-block-caption { padding: 2px 5px; font-size: small; }

div.code-block-caption code { background-color: transparent; }

div.code-block-caption + div > div.highlight > pre { margin-top: 0px; }

div.doctest > div.highlight span.gp { user-select: none; }

div.code-block-caption span.caption-number { padding: 0.1em 0.3em; font-sty=
le: italic; }

div.code-block-caption span.caption-text { }

div.literal-block-wrapper { padding: 1em 1em 0px; }

div.literal-block-wrapper div.highlight { margin: 0px; }

code.descname { background-color: transparent; font-weight: bold; font-size=
: 1.2em; }

code.descclassname { background-color: transparent; }

code.xref, a code { background-color: transparent; font-weight: bold; }

h1 code, h2 code, h3 code, h4 code, h5 code, h6 code { background-color: tr=
ansparent; }

.viewcode-link { float: right; }

.viewcode-back { float: right; font-family: sans-serif; }

div.viewcode-block:target { margin: -1px -10px; padding: 0px 10px; }

img.math { vertical-align: middle; }

div.body div.math p { text-align: center; }

span.eqno { float: right; }

span.eqno a.headerlink { position: relative; left: 0px; z-index: 1; }

div.math:hover a.headerlink { visibility: visible; }

@media print {
  div.document, div.documentwrapper, div.bodywrapper { width: 100%; margin:=
 0px !important; }
  div.sphinxsidebar, div.related, div.footer, #top-link { display: none; }
}
------MultipartBoundary--pqKor7BVEUh96UTtccQ369JDE6tshTqMPrnc3Soavt----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://docs.python.org/3/_static/pygments.css

@charset "utf-8";

.highlight .hll { background-color: rgb(255, 255, 204); }

.highlight { background: rgb(238, 255, 204); }

.highlight .c { color: rgb(64, 128, 144); font-style: italic; }

.highlight .err { border: 1px solid rgb(255, 0, 0); }

.highlight .k { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .o { color: rgb(102, 102, 102); }

.highlight .ch { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cm { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cp { color: rgb(0, 112, 32); }

.highlight .cpf { color: rgb(64, 128, 144); font-style: italic; }

.highlight .c1 { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cs { color: rgb(64, 128, 144); background-color: rgb(255, 240, =
240); }

.highlight .gd { color: rgb(160, 0, 0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(255, 0, 0); }

.highlight .gh { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gi { color: rgb(0, 160, 0); }

.highlight .go { color: rgb(51, 51, 51); }

.highlight .gp { color: rgb(198, 93, 9); font-weight: bold; }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(128, 0, 128); font-weight: bold; }

.highlight .gt { color: rgb(0, 68, 221); }

.highlight .kc { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kd { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kn { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kp { color: rgb(0, 112, 32); }

.highlight .kr { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kt { color: rgb(144, 32, 0); }

.highlight .m { color: rgb(32, 128, 80); }

.highlight .s { color: rgb(64, 112, 160); }

.highlight .na { color: rgb(64, 112, 160); }

.highlight .nb { color: rgb(0, 112, 32); }

.highlight .nc { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .no { color: rgb(96, 173, 213); }

.highlight .nd { color: rgb(85, 85, 85); font-weight: bold; }

.highlight .ni { color: rgb(213, 85, 55); font-weight: bold; }

.highlight .ne { color: rgb(0, 112, 32); }

.highlight .nf { color: rgb(6, 40, 126); }

.highlight .nl { color: rgb(0, 32, 112); font-weight: bold; }

.highlight .nn { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .nt { color: rgb(6, 40, 115); font-weight: bold; }

.highlight .nv { color: rgb(187, 96, 213); }

.highlight .ow { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .mb { color: rgb(32, 128, 80); }

.highlight .mf { color: rgb(32, 128, 80); }

.highlight .mh { color: rgb(32, 128, 80); }

.highlight .mi { color: rgb(32, 128, 80); }

.highlight .mo { color: rgb(32, 128, 80); }

.highlight .sa { color: rgb(64, 112, 160); }

.highlight .sb { color: rgb(64, 112, 160); }

.highlight .sc { color: rgb(64, 112, 160); }

.highlight .dl { color: rgb(64, 112, 160); }

.highlight .sd { color: rgb(64, 112, 160); font-style: italic; }

.highlight .s2 { color: rgb(64, 112, 160); }

.highlight .se { color: rgb(64, 112, 160); font-weight: bold; }

.highlight .sh { color: rgb(64, 112, 160); }

.highlight .si { color: rgb(112, 160, 208); font-style: italic; }

.highlight .sx { color: rgb(198, 93, 9); }

.highlight .sr { color: rgb(35, 83, 136); }

.highlight .s1 { color: rgb(64, 112, 160); }

.highlight .ss { color: rgb(81, 121, 24); }

.highlight .bp { color: rgb(0, 112, 32); }

.highlight .fm { color: rgb(6, 40, 126); }

.highlight .vc { color: rgb(187, 96, 213); }

.highlight .vg { color: rgb(187, 96, 213); }

.highlight .vi { color: rgb(187, 96, 213); }

.highlight .vm { color: rgb(187, 96, 213); }

.highlight .il { color: rgb(32, 128, 80); }
------MultipartBoundary--pqKor7BVEUh96UTtccQ369JDE6tshTqMPrnc3Soavt----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://docs.python.org/3/_static/py.png

iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A
/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB9gEGxE4IQYzJ14AAAI3SURBVDjL
ZZNPSFVBFIe/e9+zd3silBCl0SZoU4s2rVq0EB5tQip4UNvATVGu3QRBiyAi2iltWkgbF5EgRhFF
RpiWtrWIzDIV1Pzz7p15M2fmtvDevOqBw8DM9zvnN8ycgF3R/eDtM2mac96ZdrFNxBikqbRV+vHH
/ut9gAZczoe7C3gnF0f6au1OLM5avFi8d1Ea+JvAMSAq8nsKOGs5f2cYJ3Y7rc2PO4BqkS8DdD98
f9tbe1ysCoxOBo1qlEXHJWcM4b5KPU19zleA0o4Clx99eO3EdqVewHsCoFRugUoVghJO7A6H6Vx9
wdtYi27cr5x6dy/03nVtWTU7bWeZh6jNUcAiCaFTURl9A+gs56AviHzh3mnqtdPxm6knfQPLU7Ua
okASQq/agY7yDrG16Mba6Pz48NP56VdrgAApYObGaicPtkovToFLQBKA/WUxTe3FRk4san15aGKg
d3Dj560rrdGJS6FT0X9YYvLuiMKL1kAQOpHZ3PqfyZfP41+9PW1VfzX0RXFSECfgNEmSTgImdDru
F2O0E8vvqZG1auQubAsKooIYYHpGvwA2g+xndQBHgWa6cG0ih5cW/w6VvEq3nChwCoBvs+bL2Z7V
ceBHGTDAIrABpMVuhw+4OiLgLIglOLPYBTQAlfErIeCzjRVg1dtEb1kt5Omv+DTV2YssAN+zNdkz
C42N9brV8WdvYp07seOdM2Of1F3AAknW0AJpwN6IgEPAEaANaMlcbmZdl7KRBuAfAb+v//yMAJoA
AAAASUVORK5CYII=

------MultipartBoundary--pqKor7BVEUh96UTtccQ369JDE6tshTqMPrnc3Soavt------
